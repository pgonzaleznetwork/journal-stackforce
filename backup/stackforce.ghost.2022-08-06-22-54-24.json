{"db":[{"meta":{"exported_on":1659826464784,"version":"5.7.0"},"data":{"benefits":[{"id":"62cdfe4dc62a74003d90da87","name":"Code samples","slug":"code-samples","created_at":"2022-07-12T23:05:49.000Z","updated_at":"2022-07-12T23:05:49.000Z"},{"id":"62cdfe4dc62a74003d90da88","name":"Other","slug":"other","created_at":"2022-07-12T23:05:49.000Z","updated_at":"2022-07-12T23:05:49.000Z"},{"id":"62d0a192acb598003d13f693","name":"Access to the whole thing","slug":"access-to-the-whole-thing","created_at":"2022-07-14T23:06:58.000Z","updated_at":"2022-07-14T23:06:58.000Z"},{"id":"62d0a192acb598003d13f694","name":"And other stuff","slug":"and-other-stuff","created_at":"2022-07-14T23:06:58.000Z","updated_at":"2022-07-14T23:06:58.000Z"},{"id":"62d0a23dacb598003d13f697","name":"Get access to articles code samples","slug":"get-access-to-articles-code-samples","created_at":"2022-07-14T23:09:49.000Z","updated_at":"2022-07-14T23:09:49.000Z"},{"id":"62d0a23dacb598003d13f698","name":"Reference architectures","slug":"reference-architectures","created_at":"2022-07-14T23:09:49.000Z","updated_at":"2022-07-14T23:09:49.000Z"},{"id":"62d0a23dacb598003d13f699","name":"One-time 30 min session to brainstorm about your app","slug":"one-time-30-min-session-to-brainstorm-about-your-app","created_at":"2022-07-14T23:09:49.000Z","updated_at":"2022-07-14T23:09:49.000Z"},{"id":"62d46da9de8d92003d6e4289","name":"Benefit 1","slug":"benefit-1","created_at":"2022-07-17T20:14:33.000Z","updated_at":"2022-07-17T20:14:33.000Z"},{"id":"62d46fb8de8d92003d6e428b","name":"Weekly chapter sent to your email every Saturday morning","slug":"weekly-chapter-sent-to-your-email-every-saturday-morning","created_at":"2022-07-17T20:23:20.000Z","updated_at":"2022-07-17T20:23:20.000Z"},{"id":"62d46fb8de8d92003d6e428c","name":"Access to chapters related to Product, Marketing, and UX","slug":"access-to-chapters-related-to-product-marketing-and-ux","created_at":"2022-07-17T20:23:20.000Z","updated_at":"2022-07-17T20:23:20.000Z"},{"id":"62d46ffade8d92003d6e428f","name":"All FREE benefits","slug":"all-free-benefits","created_at":"2022-07-17T20:24:26.000Z","updated_at":"2022-07-17T20:24:26.000Z"},{"id":"62d46ffade8d92003d6e4290","name":"Access to chapters related to Salesforce APIs, NodeJS, CSS and general software architecture","slug":"access-to-chapters-related-to-salesforce-apis-nodejs-css-and-general-software-architecture","created_at":"2022-07-17T20:24:26.000Z","updated_at":"2022-07-17T20:24:26.000Z"},{"id":"62d47088de8d92003d6e4293","name":"Access to the exclusive \"Under the code\" series, where fullstack Salesforce devs share details about how they created their apps","slug":"access-to-the-exclusive-under-the-code-series-where-fullstack-salesforce-devs-share-details-about-how-they-created-their-apps","created_at":"2022-07-17T20:26:48.000Z","updated_at":"2022-07-17T20:26:48.000Z"},{"id":"62d470fbde8d92003d6e4295","name":"New chapter sent to your email every Saturday morning","slug":"new-chapter-sent-to-your-email-every-saturday-morning","created_at":"2022-07-17T20:28:43.000Z","updated_at":"2022-07-17T20:28:43.000Z"},{"id":"62d470fbde8d92003d6e4296","name":"Access to non-technical chapters (Product, Marketing, UX,etc.)","slug":"access-to-non-technical-chapters-product-marketing-ux-etc","created_at":"2022-07-17T20:28:43.000Z","updated_at":"2022-07-17T20:28:43.000Z"},{"id":"62d56f96761dbf003dadb107","name":"One hour consultation where I can review your app, provide feedback, mentorship, etc.","slug":"one-hour-consultation-where-i-can-review-your-app-provide-feedback-mentorship-etc","created_at":"2022-07-18T14:35:02.000Z","updated_at":"2022-07-18T14:35:02.000Z"},{"id":"62d97e8856c262003d4abb31","name":"31% discount on yearly package (contact for more info)","slug":"31-discount-on-yearly-package-contact-for-more-info","created_at":"2022-07-21T16:27:52.000Z","updated_at":"2022-07-21T16:27:52.000Z"},{"id":"62da9dfe56c262003d4abb41","name":"New chapter sent to your email every 2 weeks","slug":"new-chapter-sent-to-your-email-every-2-weeks","created_at":"2022-07-22T12:54:22.000Z","updated_at":"2022-07-22T12:54:22.000Z"},{"id":"62da9dfe56c262003d4abb42","name":"Access to exclusive interviews with other fullstack Salesforce devs","slug":"access-to-exclusive-interviews-with-other-fullstack-salesforce-devs","created_at":"2022-07-22T12:54:22.000Z","updated_at":"2022-07-22T12:54:22.000Z"},{"id":"62da9dfe56c262003d4abb43","name":"Access to fullstack recipes to speed up your app development","slug":"access-to-fullstack-recipes-to-speed-up-your-app-development","created_at":"2022-07-22T12:54:22.000Z","updated_at":"2022-07-22T12:54:22.000Z"},{"id":"62da9dfe56c262003d4abb44","name":"No marketing fluff, only Salesforce APIs, Node.js, Heroku, and much more","slug":"no-marketing-fluff-only-salesforce-apis-node-js-heroku-and-much-more","created_at":"2022-07-22T12:54:22.000Z","updated_at":"2022-07-22T12:54:22.000Z"},{"id":"62e5c34ef795c9003dcdf1cd","name":"New issue sent to your email every 2 weeks","slug":"new-issue-sent-to-your-email-every-2-weeks","created_at":"2022-07-30T23:48:30.000Z","updated_at":"2022-07-30T23:48:30.000Z"},{"id":"62e6eba9f795c9003dcdf1db","name":"Fullstack recipes","slug":"fullstack-recipes","created_at":"2022-07-31T20:52:57.000Z","updated_at":"2022-07-31T20:52:57.000Z"},{"id":"62e6eba9f795c9003dcdf1dc","name":"12 in-depth real use cases on popular fullstack Salesforce apps and how they were created (what framework, patterns, etc). New chapter every month.","slug":"12-in-depth-real-use-cases-on-popular-fullstack-salesforce-apps-and-how-they-were-created-what-framework-patterns-etc-new-chapter-every-month","created_at":"2022-07-31T20:52:57.000Z","updated_at":"2022-07-31T20:52:57.000Z"},{"id":"62e6eba9f795c9003dcdf1dd","name":"Real-world examples on how to effectively use the Salesforce API","slug":"real-world-examples-on-how-to-effectively-use-the-salesforce-api","created_at":"2022-07-31T20:52:57.000Z","updated_at":"2022-07-31T20:52:57.000Z"},{"id":"62e6eba9f795c9003dcdf1de","name":"New article sent to your email every week","slug":"new-article-sent-to-your-email-every-week","created_at":"2022-07-31T20:52:57.000Z","updated_at":"2022-07-31T20:52:57.000Z"},{"id":"62e7e60cf795c9003dcdf220","name":"Salesforce APIs","slug":"salesforce-apis","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62e7e60cf795c9003dcdf221","name":"Node.js, jsforce, etc.","slug":"node-js-jsforce-etc","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62e7e60cf795c9003dcdf222","name":"Creating Chrome extensions","slug":"creating-chrome-extensions","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62e7e60cf795c9003dcdf223","name":"Creating vscode extensions","slug":"creating-vscode-extensions","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62e7e60cf795c9003dcdf224","name":"Patterns for fullstack salesforce applications","slug":"patterns-for-fullstack-salesforce-applications","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62e7e60cf795c9003dcdf225","name":"Exclusive access to \"Under the code\" series where you learn how popular Salesforce apps where created (one issue per month)","slug":"exclusive-access-to-under-the-code-series-where-you-learn-how-popular-salesforce-apps-where-created-one-issue-per-month","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62e7e60cf795c9003dcdf226","name":"New issue every 2 weeks","slug":"new-issue-every-2-weeks","created_at":"2022-08-01T14:41:16.000Z","updated_at":"2022-08-01T14:41:16.000Z"},{"id":"62ebd38b1465e8003dd3e973","name":"Unlock all articles","slug":"unlock-all-articles","created_at":"2022-08-04T14:11:23.000Z","updated_at":"2022-08-04T14:11:23.000Z"},{"id":"62ebd38b1465e8003dd3e974","name":"New content sent to your email every 2 weeks","slug":"new-content-sent-to-your-email-every-2-weeks","created_at":"2022-08-04T14:11:23.000Z","updated_at":"2022-08-04T14:11:23.000Z"},{"id":"62ebd38b1465e8003dd3e975","name":"Exclusive access to the \"Under the code\" series, where you learn how popular Salesforce apps where created (one article per month)","slug":"exclusive-access-to-the-under-the-code-series-where-you-learn-how-popular-salesforce-apps-where-created-one-article-per-month","created_at":"2022-08-04T14:11:23.000Z","updated_at":"2022-08-04T14:11:23.000Z"},{"id":"62ebd38b1465e8003dd3e976","name":"Access to fullstack recipes that you can apply to your fullstack Salesforce app","slug":"access-to-fullstack-recipes-that-you-can-apply-to-your-fullstack-salesforce-app","created_at":"2022-08-04T14:11:23.000Z","updated_at":"2022-08-04T14:11:23.000Z"},{"id":"62ebd38b1465e8003dd3e977","name":"To-the-point tutorials on Node.js, Salesforce Chrome extension and vscode extensions","slug":"to-the-point-tutorials-on-node-js-salesforce-chrome-extension-and-vscode-extensions","created_at":"2022-08-04T14:11:23.000Z","updated_at":"2022-08-04T14:11:23.000Z"},{"id":"62ecc9d81465e8003dd3e988","name":"New content sent to your email every Friday","slug":"new-content-sent-to-your-email-every-friday","created_at":"2022-08-05T07:42:16.000Z","updated_at":"2022-08-05T07:42:16.000Z"}],"custom_theme_settings":[{"id":"62cdaf20c62a74003d90da29","theme":"casper","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62cdaf20c62a74003d90da2a","theme":"casper","key":"body_font","type":"select","value":"Elegant serif"},{"id":"62cdaf20c62a74003d90da2b","theme":"casper","key":"show_publication_cover","type":"boolean","value":"true"},{"id":"62cdaf20c62a74003d90da2c","theme":"casper","key":"header_style","type":"select","value":"Center aligned"},{"id":"62cdaf20c62a74003d90da2d","theme":"casper","key":"show_logo_in_navigation","type":"boolean","value":"false"},{"id":"62cdaf20c62a74003d90da2e","theme":"casper","key":"feed_layout","type":"select","value":"Classic"},{"id":"62cdaf20c62a74003d90da2f","theme":"casper","key":"color_scheme","type":"select","value":"Light"},{"id":"62cdaf20c62a74003d90da30","theme":"casper","key":"post_image_style","type":"select","value":"Wide"},{"id":"62cdaf20c62a74003d90da31","theme":"casper","key":"email_signup_text","type":"text","value":"Sign up for more like this."},{"id":"62cdaf20c62a74003d90da32","theme":"casper","key":"show_recent_posts_footer","type":"boolean","value":"true"},{"id":"62cdaf26c62a74003d90da38","theme":"edition","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62cdaf26c62a74003d90da39","theme":"edition","key":"body_font","type":"select","value":"Modern sans-serif"},{"id":"62cdaf26c62a74003d90da3a","theme":"edition","key":"email_signup_text","type":"text","value":null},{"id":"62cdaf26c62a74003d90da3b","theme":"edition","key":"publication_cover_style","type":"select","value":"Fullscreen"},{"id":"62cdaf26c62a74003d90da3c","theme":"edition","key":"show_featured_posts","type":"boolean","value":"true"},{"id":"62cdaf26c62a74003d90da3d","theme":"edition","key":"featured_title","type":"text","value":"Featured articles"},{"id":"62cdaf26c62a74003d90da3e","theme":"edition","key":"feed_title","type":"text","value":"Latest"},{"id":"62cdaf26c62a74003d90da3f","theme":"edition","key":"feed_layout","type":"select","value":"Expanded"},{"id":"62cdaf26c62a74003d90da40","theme":"edition","key":"show_share_links","type":"boolean","value":"true"},{"id":"62cdaf27c62a74003d90da41","theme":"edition","key":"show_author","type":"boolean","value":"true"},{"id":"62cdaf27c62a74003d90da42","theme":"edition","key":"show_related_posts","type":"boolean","value":"true"},{"id":"62cdb163c62a74003d90da5c","theme":"digest","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62cdb163c62a74003d90da5d","theme":"digest","key":"body_font","type":"select","value":"Modern sans-serif"},{"id":"62cdb163c62a74003d90da5e","theme":"digest","key":"feature_image_width","type":"select","value":"Small"},{"id":"62cdb34ec62a74003d90da6f","theme":"dawn","key":"title_font","type":"select","value":"Elegant serif"},{"id":"62cdb34ec62a74003d90da70","theme":"dawn","key":"body_font","type":"select","value":"Elegant serif"},{"id":"62cdb34ec62a74003d90da71","theme":"dawn","key":"color_scheme","type":"select","value":"Light"},{"id":"62cdb34ec62a74003d90da72","theme":"dawn","key":"white_logo_for_dark_mode","type":"image","value":null},{"id":"62cdb34ec62a74003d90da74","theme":"dawn","key":"show_featured_posts","type":"boolean","value":"true"},{"id":"62cdb34fc62a74003d90da75","theme":"dawn","key":"featured_title","type":"text","value":"The best of the best"},{"id":"62cdb34fc62a74003d90da77","theme":"dawn","key":"show_author","type":"boolean","value":"false"},{"id":"62cdb34fc62a74003d90da78","theme":"dawn","key":"show_related_posts","type":"boolean","value":"true"},{"id":"62cf5fcb5348fd003d7c99df","theme":"alto","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62cf5fcb5348fd003d7c99e0","theme":"alto","key":"body_font","type":"select","value":"Modern sans-serif"},{"id":"62cf5fcb5348fd003d7c99e1","theme":"alto","key":"white_logo_for_dark_mode","type":"image","value":null},{"id":"62cf5fcb5348fd003d7c99e2","theme":"alto","key":"show_featured_posts","type":"boolean","value":"true"},{"id":"62cf5fcb5348fd003d7c99e3","theme":"alto","key":"show_author","type":"boolean","value":"true"},{"id":"62cf5fcb5348fd003d7c99e4","theme":"alto","key":"show_related_posts","type":"boolean","value":"true"},{"id":"62cf60735348fd003d7c99e6","theme":"headline","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62cf60735348fd003d7c99e7","theme":"headline","key":"body_font","type":"select","value":"Modern sans-serif"},{"id":"62cf60735348fd003d7c99e8","theme":"headline","key":"header_style","type":"select","value":"Accent color"},{"id":"62cf60735348fd003d7c99e9","theme":"headline","key":"white_publication_logo_for_transparent_header","type":"image","value":null},{"id":"62cf60735348fd003d7c99ea","theme":"headline","key":"email_signup_text","type":"text","value":"Exclusive insights from my experience launching my full-stack Salesforce app: HappySoup.io. "},{"id":"62cf60735348fd003d7c99eb","theme":"headline","key":"footer_text","type":"text","value":"Join the list of 36 subcribers for FREE to unlock chapters with code samples, reference architectures and more."},{"id":"62cf60735348fd003d7c99ec","theme":"headline","key":"enter_tag_slugs_for_primary_sections","type":"text","value":null},{"id":"62cf60735348fd003d7c99ed","theme":"headline","key":"enter_tag_slugs_for_secondary_sections","type":"text","value":null},{"id":"62d4258fde8d92003d6e426c","theme":"stackforce-theme","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62d4258fde8d92003d6e426d","theme":"stackforce-theme","key":"body_font","type":"select","value":"Modern sans-serif"},{"id":"62d4258fde8d92003d6e426e","theme":"stackforce-theme","key":"color_scheme","type":"select","value":"Auto"},{"id":"62d4258fde8d92003d6e426f","theme":"stackforce-theme","key":"white_logo_for_dark_mode","type":"image","value":null},{"id":"62d4258fde8d92003d6e4270","theme":"stackforce-theme","key":"show_featured_posts","type":"boolean","value":"true"},{"id":"62d4258fde8d92003d6e4271","theme":"stackforce-theme","key":"featured_title","type":"text","value":"Featured articles"},{"id":"62d4258fde8d92003d6e4272","theme":"stackforce-theme","key":"show_author","type":"boolean","value":"true"},{"id":"62d4258fde8d92003d6e4273","theme":"stackforce-theme","key":"show_related_posts","type":"boolean","value":"true"},{"id":"62d50ca5de8d92003d6e429b","theme":"journal","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62d50ca5de8d92003d6e429c","theme":"journal","key":"body_font","type":"select","value":"Modern sans-serif"},{"id":"62d580de761dbf003dadb10a","theme":"journal-stackforce","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"62d580de761dbf003dadb10b","theme":"journal-stackforce","key":"body_font","type":"select","value":"Modern sans-serif"}],"newsletters":[{"id":"62cdaf1b2d3dc80031d20250","uuid":"2e1c5bd1-5b2a-40a4-b1f2-048a8bc86ae6","name":"Free Members Newsletter","description":null,"slug":"default-newsletter","sender_name":"Pablo from Stackforce","sender_email":null,"sender_reply_to":"newsletter","status":"active","visibility":"members","subscribe_on_signup":1,"sort_order":0,"header_image":null,"show_header_icon":1,"show_header_title":1,"title_font_category":"sans_serif","title_alignment":"center","show_feature_image":1,"body_font_category":"sans_serif","footer_content":"Become a fullstack Salesforce dev with Stackforce","show_badge":1,"show_header_name":0,"created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-30T23:50:30.000Z"},{"id":"62dc73a856c262003d4abc57","uuid":"3be2a4d8-aa85-46d3-9740-1a056b9b19b7","name":"My newsletter","description":null,"slug":"my-newsletter","sender_name":null,"sender_email":null,"sender_reply_to":"newsletter","status":"archived","visibility":"members","subscribe_on_signup":1,"sort_order":1,"header_image":null,"show_header_icon":1,"show_header_title":1,"title_font_category":"sans_serif","title_alignment":"center","show_feature_image":1,"body_font_category":"sans_serif","footer_content":null,"show_badge":1,"show_header_name":1,"created_at":"2022-07-23T22:18:16.000Z","updated_at":"2022-07-23T22:18:55.000Z"}],"offer_redemptions":[],"offers":[{"id":"62d5dbc6761dbf003dadb142","active":0,"name":"Launch week","code":"launch","product_id":"62d46d5bde8d92003d6e4285","stripe_coupon_id":"zfSbfMyF","interval":"year","currency":null,"discount_type":"percent","discount_amount":40,"duration":"forever","duration_in_months":null,"portal_title":"Launch week","portal_description":"Stackforce is live this week! For those who sign up from now until Jan 31st, you'll have a 40% discount for the PRO membership, forever!","created_at":"2022-07-18T22:16:38.000Z","updated_at":"2022-08-03T13:27:07.000Z"},{"id":"62ebcc061465e8003dd3e96c","active":1,"name":"Curious dev","code":"ft","product_id":"62e6eba9f795c9003dcdf1da","stripe_coupon_id":"231IYf41","interval":"month","currency":"USD","discount_type":"amount","discount_amount":400,"duration":"repeating","duration_in_months":2,"portal_title":"Curious dev","portal_description":"Curious about fullstack Salesforce development? \n\nGet started with just $2 per month to get unlimited access to unique content on Salesforce APIs, Node.js and much more!","created_at":"2022-08-04T13:39:18.000Z","updated_at":"2022-08-04T13:39:18.000Z"},{"id":"62ebdd581465e8003dd3e97f","active":1,"name":"Sponsor","code":"sponsor","product_id":"62e6eba9f795c9003dcdf1da","stripe_coupon_id":"w0t7aX9K","interval":"month","currency":null,"discount_type":"percent","discount_amount":100,"duration":"repeating","duration_in_months":6,"portal_title":"Sponsor","portal_description":"Thanks for your help making Stackforce awesome!","created_at":"2022-08-04T14:53:12.000Z","updated_at":"2022-08-04T14:53:12.000Z"},{"id":"62ebe7521465e8003dd3e981","active":1,"name":"Free trial","code":"free-trial","product_id":"62e6eba9f795c9003dcdf1da","stripe_coupon_id":"3QSJirZo","interval":"month","currency":null,"discount_type":"percent","discount_amount":100,"duration":"repeating","duration_in_months":2,"portal_title":"Free trial","portal_description":"Try Stackforce FREE for 2 months","created_at":"2022-08-04T15:35:46.000Z","updated_at":"2022-08-04T15:35:46.000Z"},{"id":"62ebfb741465e8003dd3e985","active":1,"name":"First month FREE","code":"first-month","product_id":"62e6eba9f795c9003dcdf1da","stripe_coupon_id":"O5o2IiPn","interval":"month","currency":null,"discount_type":"percent","discount_amount":100,"duration":"once","duration_in_months":null,"portal_title":"First month FREE","portal_description":"Try Stackforce FREE and see for yourself how unique our content is!","created_at":"2022-08-04T17:01:40.000Z","updated_at":"2022-08-04T17:01:40.000Z"}],"posts":[{"id":"62cdaf1d2d3dc80031d202b4","uuid":"8fce75fb-4692-4adf-88a1-56bc4e03d12e","title":"Not another Salesforce blog","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2022/07/20220610_093245-3.jpg\",\"width\":4000,\"height\":3000}],[\"markdown\",{\"markdown\":\"* Product Management (MVP, marketing, etc.)\\n* Application Architecture (Heroku, Redis, Web Servers, etc.)\\n* Frontend Development (CSS frameworks, VueJS, etc.)\\n* Node.js (Express, etc.)\\n* The Salesforce Metadata and Tooling APIs\\n* How to combine multiple APIs to deliver an amazing experience\\n* Even how to center a div!\"}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/in/pablo-gonzalez-13a4b956/\"]],[\"a\",[\"href\",\"https://youtu.be/LgdJouoE3HE\"]],[\"strong\"],[\"a\",[\"href\",\"__GHOST_URL__/fees/\"]]],\"sections\":[[1,\"h3\",[[0,[],0,\"Who am I\"]]],[1,\"p\",[[0,[],0,\"My name is \"],[0,[0],1,\"Pablo Gonzalez\"],[0,[],0,\". I've been in the Salesforce ecosystem for 11+ years in multiple roles such as admin, developer, and architect.\"]]],[1,\"p\",[[0,[],0,\"I've also presented at Dreamforce and multiple community events.\"]]],[10,0],[1,\"p\",[[0,[],0,\"I'm also the creator of \"],[0,[1],1,\"HappySoup.io\"],[0,[],0,\". HappySoup is a fullstack Salesforce app built with Vue.js, Node.js, ES6, Bulma CSS and Heroku. At the time of this writing, it is the most popular free and open-source app for Salesforce impact analysis, with more than 1.5K monthly unique users.\"]]],[1,\"p\",[[0,[],0,\"Launching HappySoup literally changed my life. With it came some job opportunities that I never thought were possible, the biggest salary boost of my career, and multiple speaking opportunities at Salesforce events.\"]]],[1,\"h3\",[[0,[],0,\"What this site is\"]]],[1,\"p\",[[0,[],0,\"This is not your typical Salesforce blog. This site is \"],[0,[2],1,\"exclusively dedicated\"],[0,[],0,\" to learning how to launch a fullstack Salesforce app.\"]]],[1,\"p\",[[0,[],0,\"It includes everything from (and is not limited to):\"]]],[10,1],[1,\"h3\",[[0,[],0,\"What this site is not\"]]],[1,\"p\",[[0,[],0,\"I won't talk about the latest Salesforce certification, market trends, or how to iterate over a list of records in a Flow.\"]]],[1,\"p\",[[0,[],0,\"Because there are countless blogs and YouTube videos that go over these topics in great detail. Instead, I want to give you something unique: \"]]],[1,\"blockquote\",[[0,[],0,\"The strategy and knowledge to build an amazing fullstack Salesforce application that can take your career to new heights.\"]]],[1,\"h3\",[[0,[],0,\"Cost\"]]],[1,\"p\",[[0,[],0,\"This is a members-only blog. Please check the \"],[0,[3],1,\"\\\"Why should I pay for this blog\\\"\"],[0,[],0,\" article for more info. \"]]]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"who-am-i\">Who am I</h3><p>My name is <a href=\"https://www.linkedin.com/in/pablo-gonzalez-13a4b956/\">Pablo Gonzalez</a>. I've been in the Salesforce ecosystem for 11+ years in multiple roles such as admin, developer, and architect.</p><p>I've also presented at Dreamforce and multiple community events.</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2022/07/20220610_093245-3.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1500\" srcset=\"__GHOST_URL__/content/images/size/w600/2022/07/20220610_093245-3.jpg 600w, __GHOST_URL__/content/images/size/w1000/2022/07/20220610_093245-3.jpg 1000w, __GHOST_URL__/content/images/size/w1600/2022/07/20220610_093245-3.jpg 1600w, __GHOST_URL__/content/images/size/w2400/2022/07/20220610_093245-3.jpg 2400w\" sizes=\"(min-width: 720px) 720px\"></figure><p>I'm also the creator of <a href=\"https://youtu.be/LgdJouoE3HE\">HappySoup.io</a>. HappySoup is a fullstack Salesforce app built with Vue.js, Node.js, ES6, Bulma CSS and Heroku. At the time of this writing, it is the most popular free and open-source app for Salesforce impact analysis, with more than 1.5K monthly unique users.</p><p>Launching HappySoup literally changed my life. With it came some job opportunities that I never thought were possible, the biggest salary boost of my career, and multiple speaking opportunities at Salesforce events.</p><h3 id=\"what-this-site-is\">What this site is</h3><p>This is not your typical Salesforce blog. This site is <strong>exclusively dedicated</strong> to learning how to launch a fullstack Salesforce app.</p><p>It includes everything from (and is not limited to):</p><!--kg-card-begin: markdown--><ul>\n<li>Product Management (MVP, marketing, etc.)</li>\n<li>Application Architecture (Heroku, Redis, Web Servers, etc.)</li>\n<li>Frontend Development (CSS frameworks, VueJS, etc.)</li>\n<li>Node.js (Express, etc.)</li>\n<li>The Salesforce Metadata and Tooling APIs</li>\n<li>How to combine multiple APIs to deliver an amazing experience</li>\n<li>Even how to center a div!</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"what-this-site-is-not\">What this site is not</h3><p>I won't talk about the latest Salesforce certification, market trends, or how to iterate over a list of records in a Flow.</p><p>Because there are countless blogs and YouTube videos that go over these topics in great detail. Instead, I want to give you something unique: </p><blockquote>The strategy and knowledge to build an amazing fullstack Salesforce application that can take your career to new heights.</blockquote><h3 id=\"cost\">Cost</h3><p>This is a members-only blog. Please check the <a href=\"__GHOST_URL__/fees/\">\"Why should I pay for this blog\"</a> article for more info. </p>","comment_id":"62cdaf1d2d3dc80031d202b4","plaintext":"Who am I\n\nMy name is Pablo Gonzalez. I've been in the Salesforce ecosystem for 11+ years in multiple roles such as admin, developer, and architect.\n\nI've also presented at Dreamforce and multiple community events.\n\nI'm also the creator of HappySoup.io. HappySoup is a fullstack Salesforce app built with Vue.js, Node.js, ES6, Bulma CSS and Heroku. At the time of this writing, it is the most popular free and open-source app for Salesforce impact analysis, with more than 1.5K monthly unique users.\n\nLaunching HappySoup literally changed my life. With it came some job opportunities that I never thought were possible, the biggest salary boost of my career, and multiple speaking opportunities at Salesforce events.\n\n\nWhat this site is\n\nThis is not your typical Salesforce blog. This site is exclusively dedicated to learning how to launch a fullstack Salesforce app.\n\nIt includes everything from (and is not limited to):\n\n * Product Management (MVP, marketing, etc.)\n * Application Architecture (Heroku, Redis, Web Servers, etc.)\n * Frontend Development (CSS frameworks, VueJS, etc.)\n * Node.js (Express, etc.)\n * The Salesforce Metadata and Tooling APIs\n * How to combine multiple APIs to deliver an amazing experience\n * Even how to center a div!\n\n\n\nWhat this site is not\n\nI won't talk about the latest Salesforce certification, market trends, or how to iterate over a list of records in a Flow.\n\nBecause there are countless blogs and YouTube videos that go over these topics in great detail. Instead, I want to give you something unique:\n\nThe strategy and knowledge to build an amazing fullstack Salesforce application that can take your career to new heights.\n\n\nCost\n\nThis is a members-only blog. Please check the \"Why should I pay for this blog\" article for more info.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-12T17:27:57.000Z","updated_at":"2022-08-05T20:23:07.000Z","published_at":"2022-07-12T17:27:57.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62cf260e8cd2f1003da00485","uuid":"c98d286c-4338-44f7-9302-f21d4eeabe9d","title":"Your fullstack Salesforce app must innovate or die","slug":"what-problem-should-your-app-solve","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"Don't think \\\"<em>my Salesforce app should do this and should do that</em>\\\", instead, think about what pain it will solve.\",\"backgroundColor\":\"red\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If your goal in creating a fullstack Salesforce app is for it to become widely popular and useful to many in the ecosystem, it must solve a real-world and tangible problem, and it must innovate while doing so.\",\"backgroundColor\":\"green\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://www.linkedin.com/in/samhoult/\"]],[\"a\",[\"href\",\"dataimporter.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"What should your fullstack Salesforce app do or what \"],[0,[0],1,\"problem should it solve\"],[0,[],0,\"?\"]]],[1,\"p\",[[0,[],0,\"This is the question at the center of every developer's journey to creating a fullstack Salesforce app. Notice the question is about the problem and not what features an app should have. \"]]],[10,0],[1,\"p\",[[0,[],0,\"And if it's an existing problem, it must be solved in an innovative way. \"]]],[1,\"h3\",[[0,[],0,\"How to identify a problem\"]]],[1,\"p\",[[0,[],0,\"The best way to find a problem to solve is to think of a problem you are experiencing yourself. \"]]],[1,\"p\",[[0,[],0,\"Sometimes the best problems to solve are those that we are used to; the ones we work our way around and accept. Let's see an example.\"]]],[1,\"p\",[[0,[],0,\"Many people in the Salesforce ecosystem are aware of the limitations of the Salesforce data loader; the pain of creating vlookups in Google Sheets, etc., yet we all accept it. \"]]],[1,\"p\",[[0,[],0,\"Very few think \\\"\"],[0,[1],1,\"there has a better way to do this\"],[0,[],0,\"\\\" or if they think that, they don't think it is worth going out of their way to resolve it. In other words, they accept the problem.\"]]],[1,\"p\",[[0,[],0,\"But there's always room for innovation, be it a better UI, a better pricing model, or even better customer support.\"]]],[1,\"p\",[[0,[],0,\"So that's what\"],[0,[2],1,\" Sam Hoult\"],[0,[],0,\", from \"],[0,[3],1,\"dataimporter.io\"],[0,[],0,\", did.\"]]],[1,\"p\",[[0,[],0,\"His fullstack Salesforce app addresses many of the limitations of the Salesforce data loader and its competitors.\"]]],[1,\"p\",[[0,[],0,\"The problem he solved was he wasn't satisfied with the status quo of data loading in Salesforce. And not only did he solve this problem, but he also \"],[0,[0],1,\"innovated\"],[0,[],0,\" by giving users a much better UI, better pricing, etc.\"]]],[1,\"h3\",[[0,[],0,\"A graveyard of cool apps \"]]],[1,\"p\",[[0,[],0,\"On the opposite side, many of us have created small utility apps. Little scripts here and there, or small web applications that help us automate one or two tasks.\"]]],[1,\"p\",[[0,[],0,\"There's nothing wrong with cool apps. They are great for learning and experimenting. Anyone who has created a successful fullstack Salesforce app started with these types of apps.\"]]],[1,\"p\",[[0,[],0,\"The problem comes when we become so in love with these cool apps, that we think everyone will love them. So we make it open-source, talk about it on LinkedIn, Reddit, etc. \"]]],[1,\"p\",[[0,[],0,\"But eventually, the app is no longer useful. Maybe you changed jobs and your new employer doesn't need it. Or perhaps Salesforce now has addressed the problem your app was addressing.\"]]],[1,\"p\",[[0,[],0,\"Perhaps it wasn't actually a big deal and most people can't be bothered to even download it. The worst part is when we realize that there wasn't a problem to begin with. Instead, we created a tool and then went looking for a problem to solve. \"]]],[1,\"p\",[[0,[],0,\"I've gone through all this myself.\"]]],[10,1],[1,\"p\",[[0,[],0,\"All cool apps eventually die. So I leave you with a question to ponder: \"]]],[1,\"blockquote\",[[0,[],0,\"Is your fullstack Salesforce app innovating, or dying?\"]]],[10,2],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>What should your fullstack Salesforce app do or what <strong>problem should it solve</strong>?</p><p>This is the question at the center of every developer's journey to creating a fullstack Salesforce app. Notice the question is about the problem and not what features an app should have. </p><div class=\"kg-card kg-callout-card kg-callout-card-red\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">Don't think \"<em>my Salesforce app should do this and should do that</em>\", instead, think about what pain it will solve.</div></div><p>And if it's an existing problem, it must be solved in an innovative way. </p><h3 id=\"how-to-identify-a-problem\">How to identify a problem</h3><p>The best way to find a problem to solve is to think of a problem you are experiencing yourself. </p><p>Sometimes the best problems to solve are those that we are used to; the ones we work our way around and accept. Let's see an example.</p><p>Many people in the Salesforce ecosystem are aware of the limitations of the Salesforce data loader; the pain of creating vlookups in Google Sheets, etc., yet we all accept it. </p><p>Very few think \"<em>there has a better way to do this</em>\" or if they think that, they don't think it is worth going out of their way to resolve it. In other words, they accept the problem.</p><p>But there's always room for innovation, be it a better UI, a better pricing model, or even better customer support.</p><p>So that's what<a href=\"https://www.linkedin.com/in/samhoult/\"> Sam Hoult</a>, from <a href=\"dataimporter.io\">dataimporter.io</a>, did.</p><p>His fullstack Salesforce app addresses many of the limitations of the Salesforce data loader and its competitors.</p><p>The problem he solved was he wasn't satisfied with the status quo of data loading in Salesforce. And not only did he solve this problem, but he also <strong>innovated</strong> by giving users a much better UI, better pricing, etc.</p><h3 id=\"a-graveyard-of-cool-apps\">A graveyard of cool apps </h3><p>On the opposite side, many of us have created small utility apps. Little scripts here and there, or small web applications that help us automate one or two tasks.</p><p>There's nothing wrong with cool apps. They are great for learning and experimenting. Anyone who has created a successful fullstack Salesforce app started with these types of apps.</p><p>The problem comes when we become so in love with these cool apps, that we think everyone will love them. So we make it open-source, talk about it on LinkedIn, Reddit, etc. </p><p>But eventually, the app is no longer useful. Maybe you changed jobs and your new employer doesn't need it. Or perhaps Salesforce now has addressed the problem your app was addressing.</p><p>Perhaps it wasn't actually a big deal and most people can't be bothered to even download it. The worst part is when we realize that there wasn't a problem to begin with. Instead, we created a tool and then went looking for a problem to solve. </p><p>I've gone through all this myself.</p><div class=\"kg-card kg-callout-card kg-callout-card-green\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If your goal in creating a fullstack Salesforce app is for it to become widely popular and useful to many in the ecosystem, it must solve a real-world and tangible problem, and it must innovate while doing so.</div></div><p>All cool apps eventually die. So I leave you with a question to ponder: </p><blockquote>Is your fullstack Salesforce app innovating, or dying?</blockquote><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div>","comment_id":"62cf260e8cd2f1003da00485","plaintext":"What should your fullstack Salesforce app do or what problem should it solve?\n\nThis is the question at the center of every developer's journey to creating a fullstack Salesforce app. Notice the question is about the problem and not what features an app should have.\n\n💡Don't think \"my Salesforce app should do this and should do that\", instead, think about what pain it will solve.\n\nAnd if it's an existing problem, it must be solved in an innovative way.\n\n\nHow to identify a problem\n\nThe best way to find a problem to solve is to think of a problem you are experiencing yourself.\n\nSometimes the best problems to solve are those that we are used to; the ones we work our way around and accept. Let's see an example.\n\nMany people in the Salesforce ecosystem are aware of the limitations of the Salesforce data loader; the pain of creating vlookups in Google Sheets, etc., yet we all accept it.\n\nVery few think \"there has a better way to do this\" or if they think that, they don't think it is worth going out of their way to resolve it. In other words, they accept the problem.\n\nBut there's always room for innovation, be it a better UI, a better pricing model, or even better customer support.\n\nSo that's what Sam Hoult, from dataimporter.io, did.\n\nHis fullstack Salesforce app addresses many of the limitations of the Salesforce data loader and its competitors.\n\nThe problem he solved was he wasn't satisfied with the status quo of data loading in Salesforce. And not only did he solve this problem, but he also innovated by giving users a much better UI, better pricing, etc.\n\n\nA graveyard of cool apps\n\nOn the opposite side, many of us have created small utility apps. Little scripts here and there, or small web applications that help us automate one or two tasks.\n\nThere's nothing wrong with cool apps. They are great for learning and experimenting. Anyone who has created a successful fullstack Salesforce app started with these types of apps.\n\nThe problem comes when we become so in love with these cool apps, that we think everyone will love them. So we make it open-source, talk about it on LinkedIn, Reddit, etc.\n\nBut eventually, the app is no longer useful. Maybe you changed jobs and your new employer doesn't need it. Or perhaps Salesforce now has addressed the problem your app was addressing.\n\nPerhaps it wasn't actually a big deal and most people can't be bothered to even download it. The worst part is when we realize that there wasn't a problem to begin with. Instead, we created a tool and then went looking for a problem to solve.\n\nI've gone through all this myself.\n\n💡If your goal in creating a fullstack Salesforce app is for it to become widely popular and useful to many in the ecosystem, it must solve a real-world and tangible problem, and it must innovate while doing so.\n\nAll cool apps eventually die. So I leave you with a question to ponder:\n\nIs your fullstack Salesforce app innovating, or dying?\n\n💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) ","feature_image":"https://images.unsplash.com/photo-1534878405839-4cccb18c59f5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDExNXx8ZGVhdGh8ZW58MHx8fHwxNjU5MjIyMDU4&ixlib=rb-1.2.1&q=80&w=2000","featured":1,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-13T20:07:42.000Z","updated_at":"2022-07-31T23:42:03.000Z","published_at":"2022-07-13T20:16:01.000Z","custom_excerpt":"Are you solving a real problem or a made-up one? ","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62cf585e8cd2f1003da004fa","uuid":"7ce9d04f-ca9a-4157-84db-ae44d5a2e604","title":"You may have started coding your fullstack Salesforce app too soon","slug":"when-should-you-start-coding-your-salesforce-app","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"paywall\",{}],[\"markdown\",{\"markdown\":\"* Is there a native slack SDK for apex?\\n* If not, should I create one, and then build my app on top of that?\\n* If there is, does it do what I need?\\n* How do I authenticate?\\n* What if someone wants to send a notification when a Case is closed and not an Opportunity? Can I build a generic apex interface?\\n* What if someone uses Microsoft Teams instead, how will I support that?\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"Validate your assumptions, let the architectural requirements reveal themselves, and then code.&nbsp;\",\"backgroundColor\":\"yellow\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[[\"a\",[\"href\",\"https://HappySoup.io\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"The first thing I wanted to do when I started working on \"],[0,[0],1,\"HappySoup.io\"],[0,[],0,\" was to start coding. \"]]],[1,\"p\",[[0,[],0,\"I wanted to fire up my IDE and start stitching together some lines of code. After all, that's one of the most exciting parts! \"]]],[1,\"p\",[[0,[],0,\"If you've never created a fullstack Salesforce app before, I would like to encourage you not to start coding before you do the following:\"]]],[1,\"h3\",[[0,[],0,\"Validate assumptions\"]]],[1,\"p\",[[0,[],0,\"Before you start coding, you should validate some assumptions about your Salesforce app and its technical feasibility. \"]]],[1,\"p\",[[0,[],0,\"Imagine you want to create an app that uses Apex to send Slack notifications when an Opportunity is closed. Should you start coding right away? \"]]],[1,\"p\",[[0,[],0,\"A better approach is to start a google doc or alike, and start writing down some assumptions about your Salesforce app, for example:\"]]],[1,\"p\",[]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"As you start doing research for these assumptions, the architecture and technical (not functional) requirements of your app will naturally reveal themselves.\"]]],[1,\"p\",[[0,[],0,\"This is much better than starting to code, only to realize halfway that the problem you want to solve cannot be solved the way you imagined, and all the code must be thrown away.\"]]],[1,\"h3\",[[0,[],0,\"When to start coding right away\"]]],[1,\"p\",[[0,[],0,\"You can skip this entire process if you already have experience creating fullstack Salesforce apps. For example, if I had to create HappySoup all over again I would just start coding it because I already know all the architecture; I know all the patterns, all the things that I need to be aware of, and all the things that I need to avoid.\"]]],[1,\"p\",[[0,[],0,\" So if that's what you're doing, code away!  \"]]],[1,\"p\",[[0,[],0,\"But if it's your first time, please remember this sentence:\"]]],[10,2],[10,3],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>The first thing I wanted to do when I started working on <a href=\"https://HappySoup.io\">HappySoup.io</a> was to start coding. </p><p>I wanted to fire up my IDE and start stitching together some lines of code. After all, that's one of the most exciting parts! </p><p>If you've never created a fullstack Salesforce app before, I would like to encourage you not to start coding before you do the following:</p><h3 id=\"validate-assumptions\">Validate assumptions</h3><p>Before you start coding, you should validate some assumptions about your Salesforce app and its technical feasibility. </p><p>Imagine you want to create an app that uses Apex to send Slack notifications when an Opportunity is closed. Should you start coding right away? </p><p>A better approach is to start a google doc or alike, and start writing down some assumptions about your Salesforce app, for example:</p><p></p><!--members-only--><!--kg-card-begin: markdown--><ul>\n<li>Is there a native slack SDK for apex?</li>\n<li>If not, should I create one, and then build my app on top of that?</li>\n<li>If there is, does it do what I need?</li>\n<li>How do I authenticate?</li>\n<li>What if someone wants to send a notification when a Case is closed and not an Opportunity? Can I build a generic apex interface?</li>\n<li>What if someone uses Microsoft Teams instead, how will I support that?</li>\n</ul>\n<!--kg-card-end: markdown--><p>As you start doing research for these assumptions, the architecture and technical (not functional) requirements of your app will naturally reveal themselves.</p><p>This is much better than starting to code, only to realize halfway that the problem you want to solve cannot be solved the way you imagined, and all the code must be thrown away.</p><h3 id=\"when-to-start-coding-right-away\">When to start coding right away</h3><p>You can skip this entire process if you already have experience creating fullstack Salesforce apps. For example, if I had to create HappySoup all over again I would just start coding it because I already know all the architecture; I know all the patterns, all the things that I need to be aware of, and all the things that I need to avoid.</p><p> So if that's what you're doing, code away!  </p><p>But if it's your first time, please remember this sentence:</p><div class=\"kg-card kg-callout-card kg-callout-card-yellow\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">Validate your assumptions, let the architectural requirements reveal themselves, and then code.&nbsp;</div></div><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div>","comment_id":"62cf585e8cd2f1003da004fa","plaintext":"The first thing I wanted to do when I started working on HappySoup.io was to start coding.\n\nI wanted to fire up my IDE and start stitching together some lines of code. After all, that's one of the most exciting parts!\n\nIf you've never created a fullstack Salesforce app before, I would like to encourage you not to start coding before you do the following:\n\n\nValidate assumptions\n\nBefore you start coding, you should validate some assumptions about your Salesforce app and its technical feasibility.\n\nImagine you want to create an app that uses Apex to send Slack notifications when an Opportunity is closed. Should you start coding right away?\n\nA better approach is to start a google doc or alike, and start writing down some assumptions about your Salesforce app, for example:\n\n\n\n * Is there a native slack SDK for apex?\n * If not, should I create one, and then build my app on top of that?\n * If there is, does it do what I need?\n * How do I authenticate?\n * What if someone wants to send a notification when a Case is closed and not an Opportunity? Can I build a generic apex interface?\n * What if someone uses Microsoft Teams instead, how will I support that?\n\n\nAs you start doing research for these assumptions, the architecture and technical (not functional) requirements of your app will naturally reveal themselves.\n\nThis is much better than starting to code, only to realize halfway that the problem you want to solve cannot be solved the way you imagined, and all the code must be thrown away.\n\n\nWhen to start coding right away\n\nYou can skip this entire process if you already have experience creating fullstack Salesforce apps. For example, if I had to create HappySoup all over again I would just start coding it because I already know all the architecture; I know all the patterns, all the things that I need to be aware of, and all the things that I need to avoid.\n\nSo if that's what you're doing, code away!  \n\nBut if it's your first time, please remember this sentence:\n\n💡Validate your assumptions, let the architectural requirements reveal themselves, and then code. 💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) ","feature_image":"https://images.unsplash.com/photo-1563861826100-9cb868fdbe1c?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDV8fGNsb2NrfGVufDB8fHx8MTY1OTE5MDk3Mw&ixlib=rb-1.2.1&q=80&w=2000","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-13T23:42:22.000Z","updated_at":"2022-08-01T14:47:13.000Z","published_at":"2022-07-14T00:00:47.000Z","custom_excerpt":"Coding is the most exciting part of developing a fullstack Salesforce app, but should it be the first thing you do?","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":"62cdaf1b2d3dc80031d20250"},{"id":"62d02330acb598003d13f658","uuid":"92e0cd15-1b03-456a-aaae-92216ff5949a","title":"What is a full-stack Salesforce app?","slug":"ep-0-what-is-a-full-stack-salesforce-app","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"https://HappySoup.io\"]],[\"a\",[\"href\",\"https://workbench.developerforce.com/login.php\"]],[\"a\",[\"href\",\"https://github.com/sorenkrabbe/Chrome-Salesforce-inspector\"]],[\"a\",[\"href\",\"__GHOST_URL__/#/portal/signup\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"For the purposes of this site, I'm going to assume that a full-stack Salesforce is one that:\"]]],[1,\"p\",[[0,[],0,\"‌\"]]],[3,\"ol\",[[[0,[],0,\"Is off-platform. In other words, not a managed/unmanaged package\"]],[[0,[],0,\"Since it's off-platform, it uses more traditional software tooling like web servers, a frontend framework, etc.\"]],[[0,[],0,\"It connects to a Salesforce org via the API and uses multiple Salesforce APIs (SOAP, Metadata, Tooling, etc.) to interact with the org.\"]],[[0,[],0,\"Relies on other open-source projects\"]],[[0,[],0,\"The language it's written is irrelevan\"]]]],[1,\"p\",[[0,[],0,\"Some examples:\"]]],[1,\"p\",[[0,[0],1,\"HappySoup.io\"]]],[1,\"p\",[[0,[1],1,\"Salesforce Workbench\"]]],[1,\"p\",[[0,[2],1,\"The Salesforce Inspector\"]]],[1,\"h2\",[[0,[],0,\"Advantages of full-stack Salesforce apps\"]]],[1,\"p\",[[0,[],0,\"There are some pros to creating a full-stack Salesforce app instead of a managed package.\"]]],[1,\"p\",[[0,[],0,\"‌\"]]],[3,\"ul\",[[[0,[],0,\"You can use whatever programming language you want, you are not limited to Apex\"]],[[0,[],0,\"You can bypass many of the Apex governor's limits\"]],[[0,[],0,\"The ability to integrate 3rd party libraries\"]],[[0,[],0,\"Ability to use infrastructure-as-a-service to scale up when needed\"]],[[0,[],0,\"You'll gain knowledge of other technologies. This knowledge is transferable to non-salesforce roles\"]],[[0,[],0,\"\"]],[[0,[],0,\"\"]],[[0,[],0,\"‌\"]]]],[1,\"h2\",[[0,[],0,\"Disadvantages of creating a full-stack Salesforce app\"]]],[1,\"p\",[[0,[],0,\"These include\"]]],[1,\"p\",[[0,[],0,\"‌\"]]],[3,\"ul\",[[[0,[],0,\"You own everything. Security, authentication, databases, email servers, etc. With a managed package app, you get all that out of the box\"]],[[0,[],0,\"Because it's not a native app, many users will have concerns about connecting their org to your app\"]],[[0,[],0,\"\\\"Traditional\\\" Salesforce devs are less likely to be able to contribute to this app\"]],[[0,[],0,\"\"]],[[0,[],0,\"\"]],[[0,[],0,\"‌\"]]]],[1,\"h2\",[[0,[],0,\"Should your app be full-stack or managed package-based?\"]]],[1,\"p\",[[0,[],0,\"As always, there's no right or wrong answer. I'd even go as far as saying that it doesn't matter.\"]]],[1,\"p\",[[0,[],0,\"What matters, in the end, is that your app provides a clear business value and a great user experience. These two things are possible regardless of which route you take.\"]]],[1,\"p\",[[0,[],0,\"If you are reading this blog, you are likely going for the full-stack option. If that's the case, \"],[0,[3],1,\"please subscribe for free to unlock posts with code samples and more.\"]]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>For the purposes of this site, I'm going to assume that a full-stack Salesforce is one that:</p><p>‌</p><ol><li>Is off-platform. In other words, not a managed/unmanaged package</li><li>Since it's off-platform, it uses more traditional software tooling like web servers, a frontend framework, etc.</li><li>It connects to a Salesforce org via the API and uses multiple Salesforce APIs (SOAP, Metadata, Tooling, etc.) to interact with the org.</li><li>Relies on other open-source projects</li><li>The language it's written is irrelevan</li></ol><p>Some examples:</p><p><a href=\"https://HappySoup.io\">HappySoup.io</a></p><p><a href=\"https://workbench.developerforce.com/login.php\">Salesforce Workbench</a></p><p><a href=\"https://github.com/sorenkrabbe/Chrome-Salesforce-inspector\">The Salesforce Inspector</a></p><h2 id=\"advantages-of-full-stack-salesforce-apps\">Advantages of full-stack Salesforce apps</h2><p>There are some pros to creating a full-stack Salesforce app instead of a managed package.</p><p>‌</p><ul><li>You can use whatever programming language you want, you are not limited to Apex</li><li>You can bypass many of the Apex governor's limits</li><li>The ability to integrate 3rd party libraries</li><li>Ability to use infrastructure-as-a-service to scale up when needed</li><li>You'll gain knowledge of other technologies. This knowledge is transferable to non-salesforce roles</li><li></li><li></li><li>‌</li></ul><h2 id=\"disadvantages-of-creating-a-full-stack-salesforce-app\">Disadvantages of creating a full-stack Salesforce app</h2><p>These include</p><p>‌</p><ul><li>You own everything. Security, authentication, databases, email servers, etc. With a managed package app, you get all that out of the box</li><li>Because it's not a native app, many users will have concerns about connecting their org to your app</li><li>\"Traditional\" Salesforce devs are less likely to be able to contribute to this app</li><li></li><li></li><li>‌</li></ul><h2 id=\"should-your-app-be-full-stack-or-managed-package-based\">Should your app be full-stack or managed package-based?</h2><p>As always, there's no right or wrong answer. I'd even go as far as saying that it doesn't matter.</p><p>What matters, in the end, is that your app provides a clear business value and a great user experience. These two things are possible regardless of which route you take.</p><p>If you are reading this blog, you are likely going for the full-stack option. If that's the case, <a href=\"__GHOST_URL__/#/portal/signup\">please subscribe for free to unlock posts with code samples and more.</a></p>","comment_id":"62d02330acb598003d13f658","plaintext":"For the purposes of this site, I'm going to assume that a full-stack Salesforce is one that:\n\n‌\n\n 1. Is off-platform. In other words, not a managed/unmanaged package\n 2. Since it's off-platform, it uses more traditional software tooling like web servers, a frontend framework, etc.\n 3. It connects to a Salesforce org via the API and uses multiple Salesforce APIs (SOAP, Metadata, Tooling, etc.) to interact with the org.\n 4. Relies on other open-source projects\n 5. The language it's written is irrelevan\n\nSome examples:\n\nHappySoup.io\n\nSalesforce Workbench\n\nThe Salesforce Inspector\n\n\nAdvantages of full-stack Salesforce apps\n\nThere are some pros to creating a full-stack Salesforce app instead of a managed package.\n\n‌\n\n * You can use whatever programming language you want, you are not limited to Apex\n * You can bypass many of the Apex governor's limits\n * The ability to integrate 3rd party libraries\n * Ability to use infrastructure-as-a-service to scale up when needed\n * You'll gain knowledge of other technologies. This knowledge is transferable to non-salesforce roles\n * \n * \n * ‌\n\n\nDisadvantages of creating a full-stack Salesforce app\n\nThese include\n\n‌\n\n * You own everything. Security, authentication, databases, email servers, etc. With a managed package app, you get all that out of the box\n * Because it's not a native app, many users will have concerns about connecting their org to your app\n * \"Traditional\" Salesforce devs are less likely to be able to contribute to this app\n * \n * \n * ‌\n\n\nShould your app be full-stack or managed package-based?\n\nAs always, there's no right or wrong answer. I'd even go as far as saying that it doesn't matter.\n\nWhat matters, in the end, is that your app provides a clear business value and a great user experience. These two things are possible regardless of which route you take.\n\nIf you are reading this blog, you are likely going for the full-stack option. If that's the case, please subscribe for free to unlock posts with code samples and more.","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-14T14:07:44.000Z","updated_at":"2022-07-19T09:51:16.000Z","published_at":"2022-07-11T14:15:00.000Z","custom_excerpt":"A full-stack Salesforce app is not your traditional managed package app. ","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62d5bb15761dbf003dadb12b","uuid":"cb5ed66f-3781-4e4b-a226-00faefdf9ce9","title":"Testimonies","slug":"testimonies","mobiledoc":"{\"version\":\"0.3.1\",\"ghostVersion\":\"4.0\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"62d5bb15761dbf003dadb12b","plaintext":null,"feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-18T19:57:09.000Z","updated_at":"2022-07-18T19:57:15.000Z","published_at":"2022-07-18T19:57:15.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62d7e0bc56c262003d4abaad","uuid":"0803a36a-2cd5-41b1-b361-0d1ec2ad4bc1","title":"How to tell if an Apex class is reading from a field or writing to it","slug":"how-to-tell-if-an-apex-class-is-reading-from-a-field-or-writing-to-it","mobiledoc":"{\"version\":\"0.3.1\",\"ghostVersion\":\"4.0\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"62d7e0bc56c262003d4abaad","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-20T11:02:20.000Z","updated_at":"2022-07-20T11:02:20.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62d8835956c262003d4abae8","uuid":"2b0f7190-36a0-4047-a2c8-ce308d6f831b","title":"How to calculate Salesforce field utilization with Node.js","slug":"how-to-calculate-field-utilization","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-22-at-16.06.05.png\",\"width\":2112,\"height\":1212,\"caption\":\"Field utilization in HappySoup.io\"}],[\"email\",{\"html\":\"<p><em>This code looks much better in the browser</em></p>\"}],[\"code\",{\"code\":\"let metrics = {\\n    field,\\n    object,\\n    totalRecordsPopulated:0,\\n    totalRecords,\\n    recordTypeCount:{}\\n };\",\"language\":\"javascript\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let [object,fieldName] = field.split('.');\\n\\nlet restApi = restAPI(connection,logError);\\nlet metadataApi = metadataAPI(connection,logError);\",\"caption\":\"\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let countQuery = `select count(id) from ${object}`;\\nlet countResult = await restApi.query({query:countQuery});\\nlet totalRecordsCount = countResult.records[0]['expr0'];\\n\"}],[\"paywall\",{}],[\"code\",{\"code\":\"let recordTypeQuery = `select developername from recordtype where SobjectType = '${object}'`;\\n\\nlet recordTypeResult = await restApi.query({query:recordTypeQuery});\\nlet hasRecordTypes = recordTypeResult.records.length > 0;\",\"language\":\"javascript\"}],[\"code\",{\"code\":\" await Promise.all(\\n\\n            recordTypeResult.records.map(async (recordType) => {\\n            \\n                let recordsQuery = `SELECT count(id) FROM ${object} WHERE ${fieldName} != null AND RecordType.DeveloperName = '${recordType.DeveloperName}'`;\\n                let recordsResult = await restApi.query({query:recordsQuery});\\n                let countRecordsWithValue = recordsResult.records[0]['expr0'];\\n    \\n                metrics.totalRecordsPopulated += countRecordsWithValue;\\n                metrics.recordTypeCount[recordType.DeveloperName] = countRecordsWithValue;\\n    \\n                return null;\\n            })\\n        );\\n\\n        metrics.recordTypeCount.empty = totalRecordsCount - metrics.totalRecordsPopulated;\",\"language\":\"javascript\"}],[\"code\",{\"code\":\"let fieldDescribe = await metadataApi.readMetadata('CustomField',[field]);\\nlet isTextArea = fieldDescribe[0].type == 'LongTextArea'\",\"language\":\"javascript\"}],[\"code\",{\"code\":\"let recordsQuery = `SELECT ${fieldName} FROM ${object} WHERE RecordType.DeveloperName = '${recordType.DeveloperName}' AND CreatedDate = LAST_N_MONTHS:6 ORDER BY CreatedDate Desc LIMIT 1000`;\\nlet recordsResult = await restApi.query({query:recordsQuery});\\nlet countRecordsWithValue = 0;\\n\\nrecordsResult.records.forEach(record => {\\n    if(record[fieldName] != null && record[fieldName] != ''){\\n        countRecordsWithValue++;\\n        localTotalRecordsWithValue++;\\n    }\\n})\",\"language\":\"javascript\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"metrics.percentagePopulated = Math.round((metrics.totalRecordsPopulated*100)/metrics.totalRecords);\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let customField = 'Account.CustomerPriority__c';\\n\\nlet response = await getUsageMetrics(connection,customField);\\nconsole.log(response);\"}],[\"code\",{\"language\":\"json\",\"code\":\"{\\n  field: 'Account.CustomerPriority__c',\\n  object: 'Account',\\n  totalRecordsPopulated: 36,\\n  totalRecords: 41,\\n  recordTypeCount: {\\n    Internal: 12,\\n    Partner: 15,\\n    Reseller: 6,\\n    Customer: 3,\\n    External_Vendor: 0,\\n    empty: 5\\n  }\\n}\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"a\",[\"href\",\"https://www.npmjs.com/package/sfdc-happy-api\"]],[\"a\",[\"href\",\"https://jsforce.github.io/\"]],[\"a\",[\"href\",\"https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_readMetadata.htm\"]],[\"a\",[\"href\",\"https://github.com/pgonzaleznetwork/sfdc-field-utilization/blob/main/lib/usageMetrics.js\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Field utilization is, well, being able to see how much a field is used, not in the metadata, but in the data. e.g., how many records have value in this field?\"]]],[10,0],[1,\"p\",[[0,[],0,\"Many apps exist to calculate this but let's figure out how we can do it ourselves with just a few lines of code. \"]]],[1,\"p\",[[0,[],0,\"So let's assume that we are passed a \"],[0,[0,1],2,\"field\"],[0,[],0,\" variable, which contains the full field name, like \"],[0,[0,1],2,\"Account.CustomerPriority__c\"],[0,[],0,\". \"]]],[1,\"h3\",[[0,[],0,\"Data structure to return\"]]],[1,\"p\",[[0,[],0,\"The first thing we need is a data structure to define the returned value that will help us populate a chart as shown above. This is what I used\"]]],[10,1],[10,2],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Then, we need to do is find out how many records exist in that object\"]]],[10,3],[1,\"p\",[[0,[],0,\"In the code above, I instantiated a client for the REST and Metadata APIs using \"],[0,[2],1,\"sfdc-happy-api\"],[0,[],0,\" (but you could and maybe should use \"],[0,[3],1,\"jsforce\"],[0,[],0,\").\"]]],[1,\"p\",[[0,[],0,\"Then, we simply use an aggregate SOQL query to see how many records exist in the object that the field belongs. We have the total count in \"],[0,[0,1],2,\"totalRecordsCount\"],[0,[],0,\".\"]]],[10,4],[1,\"h3\",[[0,[],0,\"Figuring out if the object has record types\"]]],[1,\"p\",[[0,[],0,\"Now, we need to check if this object has record types because if it has, we want the number of records with a field value to be broken down by record type, as shown in the picture above.\"]]],[1,\"p\",[[0,[],0,\"To do that, we can use the following SOQL query\"]]],[10,5],[10,6],[1,\"h3\",[[0,[],0,\"Using Promise.all to query all records by record type\"]]],[1,\"p\",[[0,[],0,\"Now, if there are record types, we need to issue one SOQL query per record type, and see how many records meet the condition of \"],[0,[0,1],2,\"field != null\"],[0,[],0,\".  We can wrap all the SOQL queries inside \"],[0,[0,1],2,\"Promise.all\"],[0,[],0,\", that way, if the object has 10 record types, we execute all 10 SOQL queries in one go and not one by one.\"]]],[10,7],[1,\"p\",[[0,[1],1,\"Very important\"],[0,[],0,\" to note that inside \"],[0,[0,1],2,\"Promise.all\"],[0,[],0,\" we are using the \"],[0,[0,1],2,\"map\"],[0,[],0,\" function along with \"],[0,[0,1],2,\"async\"],[0,[],0,\" in order to return an array of functions. This is because you cannot call \"],[0,[0,1],2,\"async\"],[0,[],0,\" inside a traditional for loop. This took me ages to figure out, so \"],[0,[1],1,\"take note! \"]]],[1,\"h3\",[[0,[],0,\"Special case for TextArea fields\"]]],[1,\"p\",[[0,[],0,\"Now, this would not work if the field type was \"],[0,[0,1],2,\"TextArea\"],[0,[],0,\" because you cannot use those fields in SOQL queries. So, before we actually execute the above queries, we need to use the Metadata API's \"],[0,[4],1,\"readMetadata\"],[0,[],0,\" call to find out what is the field type\"]]],[10,8],[1,\"p\",[[0,[],0,\"And if it is, then the query must be very different, here's what I did\"]]],[10,9],[1,\"p\",[[0,[],0,\"Essentially I'm just getting the last 1000 records created in the past 6 months, and manually checking if the field has a value or not. This obviously gives an incomplete picture of the field population, but it's a reasonable tradeoff I think.\"]]],[1,\"h3\",[[0,[],0,\"How utilization percentage is calculated\"]]],[1,\"p\",[[0,[],0,\"The percentage populated is then calculated like this\"]]],[10,10],[1,\"p\",[[0,[],0,\"Finally, we can call our function in this way\"]]],[10,11],[1,\"h3\",[[0,[],0,\"End result\"]]],[1,\"p\",[[0,[],0,\"And here's the object that we return, with all the information about how many records exist in that object, how many have a value in this field, and a breakdown by record type. \"]]],[10,12],[1,\"p\",[[0,[],0,\"Nice! You can see the rest of the code \"],[0,[5],1,\"here\"],[0,[],0,\". \"]]],[1,\"p\",[[0,[],0,\"In a future issue, I'll talk about how to get this format to be displayed nicely in the UI. \"]]],[10,13],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>Field utilization is, well, being able to see how much a field is used, not in the metadata, but in the data. e.g., how many records have value in this field?</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-22-at-16.06.05.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1148\" srcset=\"__GHOST_URL__/content/images/size/w600/2022/07/Screenshot-2022-07-22-at-16.06.05.png 600w, __GHOST_URL__/content/images/size/w1000/2022/07/Screenshot-2022-07-22-at-16.06.05.png 1000w, __GHOST_URL__/content/images/size/w1600/2022/07/Screenshot-2022-07-22-at-16.06.05.png 1600w, __GHOST_URL__/content/images/2022/07/Screenshot-2022-07-22-at-16.06.05.png 2112w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Field utilization in HappySoup.io</figcaption></figure><p>Many apps exist to calculate this but let's figure out how we can do it ourselves with just a few lines of code. </p><p>So let's assume that we are passed a <code><strong>field</strong></code> variable, which contains the full field name, like <code><strong>Account.CustomerPriority__c</strong></code>. </p><h3 id=\"data-structure-to-return\">Data structure to return</h3><p>The first thing we need is a data structure to define the returned value that will help us populate a chart as shown above. This is what I used</p><pre><code class=\"language-javascript\">let metrics = {\n    field,\n    object,\n    totalRecordsPopulated:0,\n    totalRecords,\n    recordTypeCount:{}\n };</code></pre><p></p><p>Then, we need to do is find out how many records exist in that object</p><pre><code class=\"language-javascript\">let [object,fieldName] = field.split('.');\n\nlet restApi = restAPI(connection,logError);\nlet metadataApi = metadataAPI(connection,logError);</code></pre><p>In the code above, I instantiated a client for the REST and Metadata APIs using <a href=\"https://www.npmjs.com/package/sfdc-happy-api\">sfdc-happy-api</a> (but you could and maybe should use <a href=\"https://jsforce.github.io/\">jsforce</a>).</p><p>Then, we simply use an aggregate SOQL query to see how many records exist in the object that the field belongs. We have the total count in <code><strong>totalRecordsCount</strong></code>.</p><pre><code class=\"language-javascript\">let countQuery = `select count(id) from ${object}`;\nlet countResult = await restApi.query({query:countQuery});\nlet totalRecordsCount = countResult.records[0]['expr0'];\n</code></pre><h3 id=\"figuring-out-if-the-object-has-record-types\">Figuring out if the object has record types</h3><p>Now, we need to check if this object has record types because if it has, we want the number of records with a field value to be broken down by record type, as shown in the picture above.</p><p>To do that, we can use the following SOQL query</p><!--members-only--><pre><code class=\"language-javascript\">let recordTypeQuery = `select developername from recordtype where SobjectType = '${object}'`;\n\nlet recordTypeResult = await restApi.query({query:recordTypeQuery});\nlet hasRecordTypes = recordTypeResult.records.length &gt; 0;</code></pre><h3 id=\"using-promiseall-to-query-all-records-by-record-type\">Using Promise.all to query all records by record type</h3><p>Now, if there are record types, we need to issue one SOQL query per record type, and see how many records meet the condition of <code><strong>field != null</strong></code>.  We can wrap all the SOQL queries inside <code><strong>Promise.all</strong></code>, that way, if the object has 10 record types, we execute all 10 SOQL queries in one go and not one by one.</p><pre><code class=\"language-javascript\"> await Promise.all(\n\n            recordTypeResult.records.map(async (recordType) =&gt; {\n            \n                let recordsQuery = `SELECT count(id) FROM ${object} WHERE ${fieldName} != null AND RecordType.DeveloperName = '${recordType.DeveloperName}'`;\n                let recordsResult = await restApi.query({query:recordsQuery});\n                let countRecordsWithValue = recordsResult.records[0]['expr0'];\n    \n                metrics.totalRecordsPopulated += countRecordsWithValue;\n                metrics.recordTypeCount[recordType.DeveloperName] = countRecordsWithValue;\n    \n                return null;\n            })\n        );\n\n        metrics.recordTypeCount.empty = totalRecordsCount - metrics.totalRecordsPopulated;</code></pre><p><strong>Very important</strong> to note that inside <code><strong>Promise.all</strong></code> we are using the <code><strong>map</strong></code> function along with <code><strong>async</strong></code> in order to return an array of functions. This is because you cannot call <code><strong>async</strong></code> inside a traditional for loop. This took me ages to figure out, so <strong>take note! </strong></p><h3 id=\"special-case-for-textarea-fields\">Special case for TextArea fields</h3><p>Now, this would not work if the field type was <code><strong>TextArea</strong></code> because you cannot use those fields in SOQL queries. So, before we actually execute the above queries, we need to use the Metadata API's <a href=\"https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_readMetadata.htm\">readMetadata</a> call to find out what is the field type</p><pre><code class=\"language-javascript\">let fieldDescribe = await metadataApi.readMetadata('CustomField',[field]);\nlet isTextArea = fieldDescribe[0].type == 'LongTextArea'</code></pre><p>And if it is, then the query must be very different, here's what I did</p><pre><code class=\"language-javascript\">let recordsQuery = `SELECT ${fieldName} FROM ${object} WHERE RecordType.DeveloperName = '${recordType.DeveloperName}' AND CreatedDate = LAST_N_MONTHS:6 ORDER BY CreatedDate Desc LIMIT 1000`;\nlet recordsResult = await restApi.query({query:recordsQuery});\nlet countRecordsWithValue = 0;\n\nrecordsResult.records.forEach(record =&gt; {\n    if(record[fieldName] != null &amp;&amp; record[fieldName] != ''){\n        countRecordsWithValue++;\n        localTotalRecordsWithValue++;\n    }\n})</code></pre><p>Essentially I'm just getting the last 1000 records created in the past 6 months, and manually checking if the field has a value or not. This obviously gives an incomplete picture of the field population, but it's a reasonable tradeoff I think.</p><h3 id=\"how-utilization-percentage-is-calculated\">How utilization percentage is calculated</h3><p>The percentage populated is then calculated like this</p><pre><code class=\"language-javascript\">metrics.percentagePopulated = Math.round((metrics.totalRecordsPopulated*100)/metrics.totalRecords);</code></pre><p>Finally, we can call our function in this way</p><pre><code class=\"language-javascript\">let customField = 'Account.CustomerPriority__c';\n\nlet response = await getUsageMetrics(connection,customField);\nconsole.log(response);</code></pre><h3 id=\"end-result\">End result</h3><p>And here's the object that we return, with all the information about how many records exist in that object, how many have a value in this field, and a breakdown by record type. </p><pre><code class=\"language-json\">{\n  field: 'Account.CustomerPriority__c',\n  object: 'Account',\n  totalRecordsPopulated: 36,\n  totalRecords: 41,\n  recordTypeCount: {\n    Internal: 12,\n    Partner: 15,\n    Reseller: 6,\n    Customer: 3,\n    External_Vendor: 0,\n    empty: 5\n  }\n}</code></pre><p>Nice! You can see the rest of the code <a href=\"https://github.com/pgonzaleznetwork/sfdc-field-utilization/blob/main/lib/usageMetrics.js\">here</a>. </p><p>In a future issue, I'll talk about how to get this format to be displayed nicely in the UI. </p><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div>","comment_id":"62d8835956c262003d4abae8","plaintext":"Field utilization is, well, being able to see how much a field is used, not in the metadata, but in the data. e.g., how many records have value in this field?\n\nMany apps exist to calculate this but let's figure out how we can do it ourselves with just a few lines of code.\n\nSo let's assume that we are passed a field variable, which contains the full field name, like Account.CustomerPriority__c.\n\n\nData structure to return\n\nThe first thing we need is a data structure to define the returned value that will help us populate a chart as shown above. This is what I used\n\nlet metrics = {\n    field,\n    object,\n    totalRecordsPopulated:0,\n    totalRecords,\n    recordTypeCount:{}\n };\n\n\n\nThen, we need to do is find out how many records exist in that object\n\nlet [object,fieldName] = field.split('.');\n\nlet restApi = restAPI(connection,logError);\nlet metadataApi = metadataAPI(connection,logError);\n\nIn the code above, I instantiated a client for the REST and Metadata APIs using sfdc-happy-api (but you could and maybe should use jsforce).\n\nThen, we simply use an aggregate SOQL query to see how many records exist in the object that the field belongs. We have the total count in totalRecordsCount.\n\nlet countQuery = `select count(id) from ${object}`;\nlet countResult = await restApi.query({query:countQuery});\nlet totalRecordsCount = countResult.records[0]['expr0'];\n\n\n\nFiguring out if the object has record types\n\nNow, we need to check if this object has record types because if it has, we want the number of records with a field value to be broken down by record type, as shown in the picture above.\n\nTo do that, we can use the following SOQL query\n\nlet recordTypeQuery = `select developername from recordtype where SobjectType = '${object}'`;\n\nlet recordTypeResult = await restApi.query({query:recordTypeQuery});\nlet hasRecordTypes = recordTypeResult.records.length > 0;\n\n\nUsing Promise.all to query all records by record type\n\nNow, if there are record types, we need to issue one SOQL query per record type, and see how many records meet the condition of field != null.  We can wrap all the SOQL queries inside Promise.all, that way, if the object has 10 record types, we execute all 10 SOQL queries in one go and not one by one.\n\n await Promise.all(\n\n            recordTypeResult.records.map(async (recordType) => {\n            \n                let recordsQuery = `SELECT count(id) FROM ${object} WHERE ${fieldName} != null AND RecordType.DeveloperName = '${recordType.DeveloperName}'`;\n                let recordsResult = await restApi.query({query:recordsQuery});\n                let countRecordsWithValue = recordsResult.records[0]['expr0'];\n    \n                metrics.totalRecordsPopulated += countRecordsWithValue;\n                metrics.recordTypeCount[recordType.DeveloperName] = countRecordsWithValue;\n    \n                return null;\n            })\n        );\n\n        metrics.recordTypeCount.empty = totalRecordsCount - metrics.totalRecordsPopulated;\n\nVery important to note that inside Promise.all we are using the map function along with async in order to return an array of functions. This is because you cannot call async inside a traditional for loop. This took me ages to figure out, so take note!\n\n\nSpecial case for TextArea fields\n\nNow, this would not work if the field type was TextArea because you cannot use those fields in SOQL queries. So, before we actually execute the above queries, we need to use the Metadata API's readMetadata call to find out what is the field type\n\nlet fieldDescribe = await metadataApi.readMetadata('CustomField',[field]);\nlet isTextArea = fieldDescribe[0].type == 'LongTextArea'\n\nAnd if it is, then the query must be very different, here's what I did\n\nlet recordsQuery = `SELECT ${fieldName} FROM ${object} WHERE RecordType.DeveloperName = '${recordType.DeveloperName}' AND CreatedDate = LAST_N_MONTHS:6 ORDER BY CreatedDate Desc LIMIT 1000`;\nlet recordsResult = await restApi.query({query:recordsQuery});\nlet countRecordsWithValue = 0;\n\nrecordsResult.records.forEach(record => {\n    if(record[fieldName] != null && record[fieldName] != ''){\n        countRecordsWithValue++;\n        localTotalRecordsWithValue++;\n    }\n})\n\nEssentially I'm just getting the last 1000 records created in the past 6 months, and manually checking if the field has a value or not. This obviously gives an incomplete picture of the field population, but it's a reasonable tradeoff I think.\n\n\nHow utilization percentage is calculated\n\nThe percentage populated is then calculated like this\n\nmetrics.percentagePopulated = Math.round((metrics.totalRecordsPopulated*100)/metrics.totalRecords);\n\nFinally, we can call our function in this way\n\nlet customField = 'Account.CustomerPriority__c';\n\nlet response = await getUsageMetrics(connection,customField);\nconsole.log(response);\n\n\nEnd result\n\nAnd here's the object that we return, with all the information about how many records exist in that object, how many have a value in this field, and a breakdown by record type.\n\n{\n  field: 'Account.CustomerPriority__c',\n  object: 'Account',\n  totalRecordsPopulated: 36,\n  totalRecords: 41,\n  recordTypeCount: {\n    Internal: 12,\n    Partner: 15,\n    Reseller: 6,\n    Customer: 3,\n    External_Vendor: 0,\n    empty: 5\n  }\n}\n\nNice! You can see the rest of the code here.\n\nIn a future issue, I'll talk about how to get this format to be displayed nicely in the UI.\n\n💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) ","feature_image":"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-22-at-16.06.05-1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"paid","email_recipient_filter":"all","created_at":"2022-07-20T22:36:09.000Z","updated_at":"2022-08-06T14:59:03.000Z","published_at":"2022-07-22T15:35:01.000Z","custom_excerpt":"The REST and Metadata APIs can help us calculate how much a field is being used, broken down by record type. ","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62d8838356c262003d4abaec","uuid":"f1874ef3-46dd-4635-8874-4a1a39a10265","title":"Using global connected app","slug":"using-global-connected-app","mobiledoc":"{\"version\":\"0.3.1\",\"ghostVersion\":\"4.0\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"62d8838356c262003d4abaec","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-20T22:36:51.000Z","updated_at":"2022-07-20T22:36:51.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62d8839e56c262003d4abaf0","uuid":"fc560a75-74df-4067-b2ee-a7dd1adc677e","title":"Running specified Apex tests from a GitHub pull request body using Node.js","slug":"running-specified-tests-from-pull-request-body","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-24-at-14.44.12.png\",\"width\":1432,\"height\":760,\"caption\":\"Example pull request body in GitHub\",\"cardWidth\":\"\"}],[\"paywall\",{}],[\"code\",{\"language\":\"yaml\",\"code\":\"- name: 'Read PR Body'\\n              env:\\n                # The pull request body is available through the github context object\\n                # we put the body of the pull request in an env variable (only available to this step)\\n                PR_BODY: ${{github.event.pull_request.body}}\\n\\n              # Here we print the content of the environment variable and\\n              # pipe to a a text file.\\n\\n              # Then we call the local script parsePR.js, which will create\\n              # a new file called testsToRun.txt. This file will have the list\\n              # of tests to run separated by a comma\\n\\n              # Finally, we add the list of tests to the $GITHUB_ENV variable\\n              # as this allows us to reference the list in a subsequent step.  If you\\n              # were using a normal env variable, its value would not be available outside this step.\\n              run: |\\n                  echo $PR_BODY > ./pr_body.txt\\n                  node ./parsePR.js              \\n                  TESTS=$(cat testsToRun.txt)       \\n                  echo \\\"APEX_TESTS=$TESTS\\\" >> $GITHUB_ENV\"}],[\"code\",{\"language\":\"bash\",\"code\":\"echo $PR_BODY > ./pr_body.txt\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"async function extractTests(){\\n\\n    //by default we specify that all tests should run\\n    let testsFile = __dirname+'/testsToRun.txt';\\n    await fs.promises.writeFile(testsFile,'all');\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"const lines = readline.createInterface({\\n    input: fs.createReadStream(__dirname+'/pr_body.txt'),\\n    crlfDelay: Infinity\\n});\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"for await (const line of lines) {\\n    //special delimeter for apex tests\\n    if(line.includes('Apex::[') && line.includes(']::Apex')){\\n \"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let tests = line.substring(8,line.length-7);\\nawait fs.promises.writeFile(testsFile,tests);\\nawait fs.promises.appendFile(testsFile,'\\\\n');\"}],[\"code\",{\"language\":\"bash\",\"code\":\"TESTS=$(cat testsToRun.txt)       \\necho \\\"APEX_TESTS=$TESTS\\\" >> $GITHUB_ENV\"}],[\"code\",{\"language\":\"yaml\",\"code\":\" - name: 'Check-only deploy delta changes - run specified tests'\\n              if: ${{ env.APEX_TESTS != 'all' }}\\n              run: |\\n                  echo ${{env.APEX_TESTS}}\\n                  sfdx force:source:deploy -p \\\"changed-sources/force-app\\\" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json\"}],[\"code\",{\"language\":\"bash\",\"code\":\"--testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}}\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[[\"a\",[\"href\",\"https://www.salesforceben.com/build-your-own-ci-cd-pipeline-in-salesforce-using-github-actions/\"]],[\"code\"],[\"strong\"],[\"a\",[\"href\",\"https://github.com/salto-io/salesforce-ci-cd-org-dev/blob/master/parsePR.js\"]],[\"a\",[\"href\",\"https://github.com/salto-io/salesforce-ci-cd-org-dev/blob/master/.github/workflows/pr-develop-branch.yml\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In the SalesforceBen article, \"],[0,[0],1,\"How to build your own CI/CD pipeline (Using GitHub Actions)\"],[0,[],0,\", I showed that developers can specify which apex tests to run by using a special syntax in the pull request body.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Let's see how it's done\"]]],[1,\"h3\",[[0,[],0,\"The syntax\"]]],[1,\"p\",[[0,[],0,\"First, the developer needs to use the following syntax to specify which tests to run when this pull request is merged into the target branch\"]]],[1,\"p\",[[0,[1,2],2,\"Apex::[Test1,Test2,Test3]::Apex\"]]],[1,\"p\",[[0,[],0,\"Also, if the developer wants to run all tests, the following can be used as well\"]]],[1,\"p\",[[0,[1,2],2,\"Apex::[All]::Apex\"]]],[1,\"p\",[[0,[],0,\"This syntax is arbitrary. In other words, it can be anything that you want. I decided to use \"],[0,[1,2],2,\"Apex::[\"],[0,[],0,\" as delimiters because it's very unlikely that a developer would write that in the pull request body without actually intending to specify the tests.\"]]],[1,\"p\",[[0,[],0,\" This means, that if the syntax was \"],[0,[1,2],2,\"ApexTest\"],[0,[],0,\" or something more simple, the CI/CD job could incorrectly parse other text that has nothing to do with the tests. Hopefully, that made sense...  \"]]],[1,\"h3\",[[0,[],0,\"Reading the pull request body\"]]],[1,\"p\",[[0,[],0,\"When the pull request is merged, a GitHub action workflow kicks in. And in this workflow, I want to read the pull request body and see if the special syntax is found, and if so, pass those tests over to the Salesforce CLI.\"]]],[1,\"p\",[[0,[],0,\"To read the pull request body, I'm using this inside my \"],[0,[1,2],2,\".yml\"],[0,[],0,\" workflow file. I've added comments so that you can see what's going on:\"]]],[10,1],[10,2],[1,\"p\",[[0,[],0,\"Ok, so as seen above, we create an env variable called \"],[0,[1,2],2,\"PR_BODY\"],[0,[],0,\"  that contains the pull request body, and then we create a new file with that body\"]]],[10,3],[1,\"p\",[[0,[],0,\"Then, we use Node.js to call the \"],[0,[1,2],2,\"parsePR.js\"],[0,[],0,\" file\"]]],[1,\"h3\",[[0,[],0,\"Using JavaScript to extract the apex tests\"]]],[1,\"p\",[[0,[],0,\"Let's define the function that will the text inside \"],[0,[1,2],2,\"pr_body.txt\"]]],[10,4],[1,\"p\",[[0,[],0,\"Here, we create a new file called \"],[0,[1,2],2,\"testsToRun.txt\"],[0,[],0,\" and set the value to \"],[0,[1,2],2,\"all\"],[0,[],0,\". This is because in case the developer didn't specify anything, we want to run all tests.\"]]],[1,\"p\",[[0,[],0,\"Then, we are going to read each line of the file, one by one\"]]],[10,5],[1,\"p\",[[0,[],0,\"Now, we loop through all the lines and see if we can find our special delimiter\"]]],[10,6],[1,\"p\",[[0,[],0,\"Note here that I probably should used \"],[0,[1,2],2,\"line.toLowerCase()\"],[0,[],0,\" to make sure that I find a match even if the developer didn't use the exact case, but I'll leave that to you as an exercise ;)\"]]],[1,\"p\",[[0,[],0,\"If we do find that delimiter, we then extract all the tests that were specified inside of it and we write them back to the \"],[0,[1,2],2,\"testsToRun.txt\"],[0,[],0,\" file.\"]]],[10,7],[1,\"h3\",[[0,[],0,\"Putting the specified tests in a GitHub env variable\"]]],[1,\"p\",[[0,[],0,\"Now, we can go back to our \"],[0,[1,2],2,\"yml\"],[0,[],0,\" file and put those tests back into an env variable\"]]],[10,8],[1,\"h3\",[[0,[],0,\"Passing the tests to the Salesforce CLI\"]]],[1,\"p\",[[0,[],0,\"Then, in our \"],[0,[1,2],2,\"yml\"],[0,[],0,\" file we do the following\"]]],[10,9],[1,\"p\",[[0,[],0,\"What we did here is to check if the \"],[0,[1,2],2,\"env.APEX_TESTS\"],[0,[],0,\" variable does not equal to \"],[0,[1,2],2,\"all\"],[0,[],0,\", meaning, there are some specified tests in it. If so, we then use the \"],[0,[1,2],2,\"sfdx force:source:deploy\"],[0,[],0,\" command, passing the tests from the env variable\"]]],[10,10],[1,\"p\",[[0,[],0,\"And that's it! It works beautifully!\"]]],[1,\"p\",[[0,[],0,\"You can check the full javascript file \"],[0,[3],1,\"here\"],[0,[],0,\", and the GitHub action workflow file \"],[0,[4],1,\"here\"],[0,[],0,\".\"]]],[10,11],[1,\"p\",[]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>In the SalesforceBen article, <a href=\"https://www.salesforceben.com/build-your-own-ci-cd-pipeline-in-salesforce-using-github-actions/\">How to build your own CI/CD pipeline (Using GitHub Actions)</a>, I showed that developers can specify which apex tests to run by using a special syntax in the pull request body.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-24-at-14.44.12.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1432\" height=\"760\" srcset=\"__GHOST_URL__/content/images/size/w600/2022/07/Screenshot-2022-07-24-at-14.44.12.png 600w, __GHOST_URL__/content/images/size/w1000/2022/07/Screenshot-2022-07-24-at-14.44.12.png 1000w, __GHOST_URL__/content/images/2022/07/Screenshot-2022-07-24-at-14.44.12.png 1432w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Example pull request body in GitHub</figcaption></figure><p>Let's see how it's done</p><h3 id=\"the-syntax\">The syntax</h3><p>First, the developer needs to use the following syntax to specify which tests to run when this pull request is merged into the target branch</p><p><code><strong>Apex::[Test1,Test2,Test3]::Apex</strong></code></p><p>Also, if the developer wants to run all tests, the following can be used as well</p><p><code><strong>Apex::[All]::Apex</strong></code></p><p>This syntax is arbitrary. In other words, it can be anything that you want. I decided to use <code><strong>Apex::[</strong></code> as delimiters because it's very unlikely that a developer would write that in the pull request body without actually intending to specify the tests.</p><p> This means, that if the syntax was <code><strong>ApexTest</strong></code> or something more simple, the CI/CD job could incorrectly parse other text that has nothing to do with the tests. Hopefully, that made sense...  </p><h3 id=\"reading-the-pull-request-body\">Reading the pull request body</h3><p>When the pull request is merged, a GitHub action workflow kicks in. And in this workflow, I want to read the pull request body and see if the special syntax is found, and if so, pass those tests over to the Salesforce CLI.</p><p>To read the pull request body, I'm using this inside my <code><strong>.yml</strong></code> workflow file. I've added comments so that you can see what's going on:</p><!--members-only--><pre><code class=\"language-yaml\">- name: 'Read PR Body'\n              env:\n                # The pull request body is available through the github context object\n                # we put the body of the pull request in an env variable (only available to this step)\n                PR_BODY: ${{github.event.pull_request.body}}\n\n              # Here we print the content of the environment variable and\n              # pipe to a a text file.\n\n              # Then we call the local script parsePR.js, which will create\n              # a new file called testsToRun.txt. This file will have the list\n              # of tests to run separated by a comma\n\n              # Finally, we add the list of tests to the $GITHUB_ENV variable\n              # as this allows us to reference the list in a subsequent step.  If you\n              # were using a normal env variable, its value would not be available outside this step.\n              run: |\n                  echo $PR_BODY &gt; ./pr_body.txt\n                  node ./parsePR.js              \n                  TESTS=$(cat testsToRun.txt)       \n                  echo \"APEX_TESTS=$TESTS\" &gt;&gt; $GITHUB_ENV</code></pre><p>Ok, so as seen above, we create an env variable called <code><strong>PR_BODY</strong></code>  that contains the pull request body, and then we create a new file with that body</p><pre><code class=\"language-bash\">echo $PR_BODY &gt; ./pr_body.txt</code></pre><p>Then, we use Node.js to call the <code><strong>parsePR.js</strong></code> file</p><h3 id=\"using-javascript-to-extract-the-apex-tests\">Using JavaScript to extract the apex tests</h3><p>Let's define the function that will the text inside <code><strong>pr_body.txt</strong></code></p><pre><code class=\"language-javascript\">async function extractTests(){\n\n    //by default we specify that all tests should run\n    let testsFile = __dirname+'/testsToRun.txt';\n    await fs.promises.writeFile(testsFile,'all');</code></pre><p>Here, we create a new file called <code><strong>testsToRun.txt</strong></code> and set the value to <code><strong>all</strong></code>. This is because in case the developer didn't specify anything, we want to run all tests.</p><p>Then, we are going to read each line of the file, one by one</p><pre><code class=\"language-javascript\">const lines = readline.createInterface({\n    input: fs.createReadStream(__dirname+'/pr_body.txt'),\n    crlfDelay: Infinity\n});</code></pre><p>Now, we loop through all the lines and see if we can find our special delimiter</p><pre><code class=\"language-javascript\">for await (const line of lines) {\n    //special delimeter for apex tests\n    if(line.includes('Apex::[') &amp;&amp; line.includes(']::Apex')){\n </code></pre><p>Note here that I probably should used <code><strong>line.toLowerCase()</strong></code> to make sure that I find a match even if the developer didn't use the exact case, but I'll leave that to you as an exercise ;)</p><p>If we do find that delimiter, we then extract all the tests that were specified inside of it and we write them back to the <code><strong>testsToRun.txt</strong></code> file.</p><pre><code class=\"language-javascript\">let tests = line.substring(8,line.length-7);\nawait fs.promises.writeFile(testsFile,tests);\nawait fs.promises.appendFile(testsFile,'\\n');</code></pre><h3 id=\"putting-the-specified-tests-in-a-github-env-variable\">Putting the specified tests in a GitHub env variable</h3><p>Now, we can go back to our <code><strong>yml</strong></code> file and put those tests back into an env variable</p><pre><code class=\"language-bash\">TESTS=$(cat testsToRun.txt)       \necho \"APEX_TESTS=$TESTS\" &gt;&gt; $GITHUB_ENV</code></pre><h3 id=\"passing-the-tests-to-the-salesforce-cli\">Passing the tests to the Salesforce CLI</h3><p>Then, in our <code><strong>yml</strong></code> file we do the following</p><pre><code class=\"language-yaml\"> - name: 'Check-only deploy delta changes - run specified tests'\n              if: ${{ env.APEX_TESTS != 'all' }}\n              run: |\n                  echo ${{env.APEX_TESTS}}\n                  sfdx force:source:deploy -p \"changed-sources/force-app\" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json</code></pre><p>What we did here is to check if the <code><strong>env.APEX_TESTS</strong></code> variable does not equal to <code><strong>all</strong></code>, meaning, there are some specified tests in it. If so, we then use the <code><strong>sfdx force:source:deploy</strong></code> command, passing the tests from the env variable</p><pre><code class=\"language-bash\">--testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}}</code></pre><p>And that's it! It works beautifully!</p><p>You can check the full javascript file <a href=\"https://github.com/salto-io/salesforce-ci-cd-org-dev/blob/master/parsePR.js\">here</a>, and the GitHub action workflow file <a href=\"https://github.com/salto-io/salesforce-ci-cd-org-dev/blob/master/.github/workflows/pr-develop-branch.yml\">here</a>.</p><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div><p></p>","comment_id":"62d8839e56c262003d4abaf0","plaintext":"In the SalesforceBen article, How to build your own CI/CD pipeline (Using GitHub Actions), I showed that developers can specify which apex tests to run by using a special syntax in the pull request body.\n\nLet's see how it's done\n\n\nThe syntax\n\nFirst, the developer needs to use the following syntax to specify which tests to run when this pull request is merged into the target branch\n\nApex::[Test1,Test2,Test3]::Apex\n\nAlso, if the developer wants to run all tests, the following can be used as well\n\nApex::[All]::Apex\n\nThis syntax is arbitrary. In other words, it can be anything that you want. I decided to use Apex::[ as delimiters because it's very unlikely that a developer would write that in the pull request body without actually intending to specify the tests.\n\nThis means, that if the syntax was ApexTest or something more simple, the CI/CD job could incorrectly parse other text that has nothing to do with the tests. Hopefully, that made sense...  \n\n\nReading the pull request body\n\nWhen the pull request is merged, a GitHub action workflow kicks in. And in this workflow, I want to read the pull request body and see if the special syntax is found, and if so, pass those tests over to the Salesforce CLI.\n\nTo read the pull request body, I'm using this inside my .yml workflow file. I've added comments so that you can see what's going on:\n\n- name: 'Read PR Body'\n              env:\n                # The pull request body is available through the github context object\n                # we put the body of the pull request in an env variable (only available to this step)\n                PR_BODY: ${{github.event.pull_request.body}}\n\n              # Here we print the content of the environment variable and\n              # pipe to a a text file.\n\n              # Then we call the local script parsePR.js, which will create\n              # a new file called testsToRun.txt. This file will have the list\n              # of tests to run separated by a comma\n\n              # Finally, we add the list of tests to the $GITHUB_ENV variable\n              # as this allows us to reference the list in a subsequent step.  If you\n              # were using a normal env variable, its value would not be available outside this step.\n              run: |\n                  echo $PR_BODY > ./pr_body.txt\n                  node ./parsePR.js              \n                  TESTS=$(cat testsToRun.txt)       \n                  echo \"APEX_TESTS=$TESTS\" >> $GITHUB_ENV\n\nOk, so as seen above, we create an env variable called PR_BODY  that contains the pull request body, and then we create a new file with that body\n\necho $PR_BODY > ./pr_body.txt\n\nThen, we use Node.js to call the parsePR.js file\n\n\nUsing JavaScript to extract the apex tests\n\nLet's define the function that will the text inside pr_body.txt\n\nasync function extractTests(){\n\n    //by default we specify that all tests should run\n    let testsFile = __dirname+'/testsToRun.txt';\n    await fs.promises.writeFile(testsFile,'all');\n\nHere, we create a new file called testsToRun.txt and set the value to all. This is because in case the developer didn't specify anything, we want to run all tests.\n\nThen, we are going to read each line of the file, one by one\n\nconst lines = readline.createInterface({\n    input: fs.createReadStream(__dirname+'/pr_body.txt'),\n    crlfDelay: Infinity\n});\n\nNow, we loop through all the lines and see if we can find our special delimiter\n\nfor await (const line of lines) {\n    //special delimeter for apex tests\n    if(line.includes('Apex::[') && line.includes(']::Apex')){\n \n\nNote here that I probably should used line.toLowerCase() to make sure that I find a match even if the developer didn't use the exact case, but I'll leave that to you as an exercise ;)\n\nIf we do find that delimiter, we then extract all the tests that were specified inside of it and we write them back to the testsToRun.txt file.\n\nlet tests = line.substring(8,line.length-7);\nawait fs.promises.writeFile(testsFile,tests);\nawait fs.promises.appendFile(testsFile,'\\n');\n\n\nPutting the specified tests in a GitHub env variable\n\nNow, we can go back to our yml file and put those tests back into an env variable\n\nTESTS=$(cat testsToRun.txt)       \necho \"APEX_TESTS=$TESTS\" >> $GITHUB_ENV\n\n\nPassing the tests to the Salesforce CLI\n\nThen, in our yml file we do the following\n\n - name: 'Check-only deploy delta changes - run specified tests'\n              if: ${{ env.APEX_TESTS != 'all' }}\n              run: |\n                  echo ${{env.APEX_TESTS}}\n                  sfdx force:source:deploy -p \"changed-sources/force-app\" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json\n\nWhat we did here is to check if the env.APEX_TESTS variable does not equal to all, meaning, there are some specified tests in it. If so, we then use the sfdx force:source:deploy command, passing the tests from the env variable\n\n--testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}}\n\nAnd that's it! It works beautifully!\n\nYou can check the full javascript file here, and the GitHub action workflow file here.\n\n💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) \n\n","feature_image":"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-31-at-23.31.33.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"paid","email_recipient_filter":"all","created_at":"2022-07-20T22:37:18.000Z","updated_at":"2022-08-06T14:57:59.000Z","published_at":"2022-07-24T14:07:12.000Z","custom_excerpt":"A little bit of JavaScript and Bash magic can help us specify which apex tests to run directly from data in a pull request","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":"62cdaf1b2d3dc80031d20250"},{"id":"62d8840f56c262003d4abaf4","uuid":"8775579b-f83a-4761-9c07-926f82875cc8","title":"Finding the API name of the object a field belongs to","slug":"finding-the-api-name-of-the-object-a-field-belongs-to","mobiledoc":"{\"version\":\"0.3.1\",\"ghostVersion\":\"4.0\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"62d8840f56c262003d4abaf4","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-20T22:39:11.000Z","updated_at":"2022-07-20T22:39:11.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62d9196056c262003d4abb01","uuid":"b60031e4-eaef-47c4-80c7-3b176a9f2d0c","title":"How becoming a fullstack Salesforce dev change their lives","slug":"how-becoming-a-fullstack-salesforce-dev-change-their-lives","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"amazon.com\"]]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[0],1,\"Pablo Gonzalez\"],[0,[],0,\" - Business Engineering at Salto\"]]],[1,\"blockquote\",[[0,[],0,\"It changed my life bla bla because of this this and that\"]]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p></p><p><a href=\"amazon.com\">Pablo Gonzalez</a> - Business Engineering at Salto</p><blockquote>It changed my life bla bla because of this this and that</blockquote>","comment_id":"62d9196056c262003d4abb01","plaintext":"Pablo Gonzalez - Business Engineering at Salto\n\nIt changed my life bla bla because of this this and that","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-21T09:16:16.000Z","updated_at":"2022-07-21T09:17:05.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62dd583756c262003d4abcf4","uuid":"ada34adf-cc6b-4856-9f44-7f4e0ab96fe7","title":"Keeping server session and OAuth access token in sync in fullstack Salesforce app","slug":"keeping-server-session-and-oauth-token-in-sync-in-fullstack-salesforce-app","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"language\":\"json\",\"code\":\"{\\n\\\"cookie\\\": {\\n\\\"originalMaxAge\\\": 7200000,\\n\\\"expires\\\": \\\"2022-07-24T16:38:41.778Z\\\",\\n\\\"httpOnly\\\": false,\\n\\\"path\\\": \\\"/\\\"\\n},\\n\\\"oauthInfo\\\": {\\n\\\"access_token\\\": \\\"00D3h000005XLUw!AQkAQNU85sx1CPE3.kzQCjA3nWYN3CzqUW8UuFWbFhq34L8HT6nx3me3tQYC6wqBhgzwj28.W5ajpTFBbOrfgiyusBmHJObU\\\",\\n\\\"refresh_token\\\": \\\"5Aep8616SrrNkkMrFtLqxeGveyBRBoJWaQnLgb4KW4dBRFLaKp55qujTNnaD3zIHDeF3kGQDIwaDOX21KXnlX3f\\\",\\n\\\"signature\\\": \\\"PIsSZEa2u0QVPEvgkGdLsssaVkunBZDeNvfVTPf5zso=\\\",\\n\\\"scope\\\": \\\"refresh_token web id api\\\",\\n\\\"instance_url\\\": \\\"https://brave-raccoon-mm7crl-dev-ed.my.salesforce.com\\\",\\n\\\"id\\\": \\\"https://login.salesforce.com/id/00D3h000005XLUwEAO/0053h000002JF4cAAG\\\",\\n\\\"token_type\\\": \\\"Bearer\\\",\\n\\\"issued_at\\\": \\\"1658673508030\\\"\\n},\\n\\\"oauthSuccess\\\": true,\\n\\\"cache\\\": {4 items},\\n\\\"identity\\\": {\\n\\\"username\\\": \\\"pgonzaleznetwork@brave-raccoon-mm7crl.com\\\",\\n\\\"name\\\": \\\"Pablo Gonzalez Alvarez\\\",\\n\\\"orgId\\\": \\\"00D3h000005XLUwEAO\\\",\\n\\\"userId\\\": \\\"0053h000002JF4cAAG\\\",\\n\\\"url\\\": \\\"https://brave-raccoon-mm7crl-dev-ed.my.salesforce.com\\\",\\n\\\"env\\\": \\\"Production\\\"\\n}\\n}\"}],[\"paywall\",{}],[\"code\",{\"language\":\"javascript\",\"code\":\"const EXPIRE_TIME = 7200000;\\n\\nlet sessionStore = new RedisStore({\\n  host: redisConfig.host, \\n  port: redisConfig.port, \\n  client: redisClient,\\n  ttl:EXPIRE_TIME,\\n  disableTouch:true,\\n  prefix:'sfhs-sess:'\\n});\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-24-at-15.51.50.png\",\"width\":1334,\"height\":280,\"caption\":\"Session settings in HappySoup Connected App\"}],[\"markdown\",{\"markdown\":\"* Frontend makes request to backend\\n* Before any kind of processing, the an express middleware checks if the redis session is still alive\\n    * If it is, then we need to check if the Salesforce session is alive\\n        * If it is, then make whatever request it's supposed to make\"}],[\"code\",{\"language\":\"javascript\",\"code\":\" let serverSessionAlive = (req.session.oauthSuccess || req.session.oauthInfo);\\n\\nif(!serverSessionAlive){\\n    throw new ErrorHandler(404,'session-expired','server session has expired');\\n}\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let sfdcSessionAlive = await isSfdcSessionAlive(getConnection(req.session));\\nif(sfdcSessionAlive) next();\\t\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"/**\\n * Quick ping to salesforce to see if the oauth token is still alive\\n */\\nasync function isSfdcSessionAlive(connection){\\n\\n    let isAlive = false;\\n\\n    let api = soapAPI(connection);\\n    let response = await api.getServerTimestamp();\\n\\n    if(response['soapenv:Envelope']['soapenv:Body'].getServerTimestampResponse){\\n        isAlive = true;\\n    }\\n\\n    return isAlive;\\n}\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[[\"strong\"],[\"code\"]],\"sections\":[[1,\"h3\",[[0,[],0,\"Two types of sessions\"]]],[1,\"p\",[[0,[],0,\"In fullstack Salesforce apps like HappySoup or workbench, it's common to have a server session. This is a \"],[0,[0],1,\"data structure\"],[0,[],0,\" that keeps data about the logged-in user, like their name, their Salesforce OAuth access token, etc. \"]]],[1,\"p\",[[0,[],0,\"Here's what a session looks like in HappySoup:\"]]],[10,0],[1,\"p\",[[0,[],0,\"These sessions typically are finite, they expire at a preconfigured time, resulting in the user being logged out the moment they try to interact with the app; I'm sure you've seen this behavior when you leave your Salesforce org open for a while.\"]]],[1,\"p\",[[0,[],0,\"But these fullstack apps also have the Salesforce access token/session Id stored in the server session. And this session also expires at some point (configured in the connected app, as we'll see later).\"]]],[1,\"p\",[[0,[],0,\"What happens if the salesforce access token expires, but the server session is still alive? Then the user would be able to interact with the app, but the app won't be able to contact Salesforce because the token is no longer valid. \"]]],[1,\"p\",[[0,[],0,\"So, how do you keep these 2 sessions in sync? \"]]],[1,\"h3\",[[0,[],0,\"Setting a time-to-live for both sessions\"]]],[1,\"p\",[[0,[],0,\"In the case of HappySoup, I'm using express sessions with a Redis database. The session id is sent back to the browser as a cookie. Every request to the backend will have this cookie in the headers, and that's how we match the session.\"]]],[10,1],[1,\"p\",[[0,[],0,\"In my session configuration, I have specified a TTL (time-to-live) value of 2 hours\"]]],[10,2],[1,\"p\",[[0,[],0,\"In the Salesforce connected app that controls HappySoup, I've also set the access token duration to 2 hours.\"]]],[10,3],[1,\"p\",[[0,[],0,\"So this is a best effort to keep them both in sync. They should expire at the same time. However, I'm not convinced that's always the case, so I added some extra logic...\"]]],[1,\"h3\",[[0,[],0,\"Using a  express middleware to validate that both sessions are still alive\"]]],[1,\"p\",[[0,[],0,\"An express middleware is a function that runs on the backend every time a request is made to the backend (it's more than that but let's go with that definition).\"]]],[1,\"p\",[[0,[],0,\"So I created a middleware to validate that both sessions are alive. The basic logic is\"]]],[10,4],[1,\"p\",[[0,[],0,\"Here's how we check if the server session is alive\"]]],[10,5],[1,\"p\",[[0,[],0,\"If it's not alive, we throw an error. If it's alive, we check if the Salesforce session is alive\"]]],[10,6],[1,\"p\",[[0,[],0,\"If the session is alive, we call \"],[0,[1],1,\"next\"],[0,[],0,\" to let the express server run the next function.\"]]],[1,\"h3\",[[0,[],0,\"How to check if the Salesforce session is alive\"]]],[1,\"p\",[[0,[],0,\"I learned this bit by looking at the source code of Workbench. The \"],[0,[1,0],2,\"isSfdcSessionAlive\"],[0,[],0,\" function does a tiny and quick API call to Salesforce, just to see if it's still alive. Think of it like a ping:\"]]],[10,7],[1,\"p\",[[0,[],0,\"The call we use is the \"],[0,[1,0],2,\"getServerTimestamp\"],[0,[],0,\" which simply returns the timezone of the org. \"]]],[1,\"p\",[[0,[],0,\"So that's it! I think this works 99% of the cases :) \"]]],[10,8],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"two-types-of-sessions\">Two types of sessions</h3><p>In fullstack Salesforce apps like HappySoup or workbench, it's common to have a server session. This is a <strong>data structure</strong> that keeps data about the logged-in user, like their name, their Salesforce OAuth access token, etc. </p><p>Here's what a session looks like in HappySoup:</p><pre><code class=\"language-json\">{\n\"cookie\": {\n\"originalMaxAge\": 7200000,\n\"expires\": \"2022-07-24T16:38:41.778Z\",\n\"httpOnly\": false,\n\"path\": \"/\"\n},\n\"oauthInfo\": {\n\"access_token\": \"00D3h000005XLUw!AQkAQNU85sx1CPE3.kzQCjA3nWYN3CzqUW8UuFWbFhq34L8HT6nx3me3tQYC6wqBhgzwj28.W5ajpTFBbOrfgiyusBmHJObU\",\n\"refresh_token\": \"5Aep8616SrrNkkMrFtLqxeGveyBRBoJWaQnLgb4KW4dBRFLaKp55qujTNnaD3zIHDeF3kGQDIwaDOX21KXnlX3f\",\n\"signature\": \"PIsSZEa2u0QVPEvgkGdLsssaVkunBZDeNvfVTPf5zso=\",\n\"scope\": \"refresh_token web id api\",\n\"instance_url\": \"https://brave-raccoon-mm7crl-dev-ed.my.salesforce.com\",\n\"id\": \"https://login.salesforce.com/id/00D3h000005XLUwEAO/0053h000002JF4cAAG\",\n\"token_type\": \"Bearer\",\n\"issued_at\": \"1658673508030\"\n},\n\"oauthSuccess\": true,\n\"cache\": {4 items},\n\"identity\": {\n\"username\": \"pgonzaleznetwork@brave-raccoon-mm7crl.com\",\n\"name\": \"Pablo Gonzalez Alvarez\",\n\"orgId\": \"00D3h000005XLUwEAO\",\n\"userId\": \"0053h000002JF4cAAG\",\n\"url\": \"https://brave-raccoon-mm7crl-dev-ed.my.salesforce.com\",\n\"env\": \"Production\"\n}\n}</code></pre><p>These sessions typically are finite, they expire at a preconfigured time, resulting in the user being logged out the moment they try to interact with the app; I'm sure you've seen this behavior when you leave your Salesforce org open for a while.</p><p>But these fullstack apps also have the Salesforce access token/session Id stored in the server session. And this session also expires at some point (configured in the connected app, as we'll see later).</p><p>What happens if the salesforce access token expires, but the server session is still alive? Then the user would be able to interact with the app, but the app won't be able to contact Salesforce because the token is no longer valid. </p><p>So, how do you keep these 2 sessions in sync? </p><h3 id=\"setting-a-time-to-live-for-both-sessions\">Setting a time-to-live for both sessions</h3><p>In the case of HappySoup, I'm using express sessions with a Redis database. The session id is sent back to the browser as a cookie. Every request to the backend will have this cookie in the headers, and that's how we match the session.</p><!--members-only--><p>In my session configuration, I have specified a TTL (time-to-live) value of 2 hours</p><pre><code class=\"language-javascript\">const EXPIRE_TIME = 7200000;\n\nlet sessionStore = new RedisStore({\n  host: redisConfig.host, \n  port: redisConfig.port, \n  client: redisClient,\n  ttl:EXPIRE_TIME,\n  disableTouch:true,\n  prefix:'sfhs-sess:'\n});</code></pre><p>In the Salesforce connected app that controls HappySoup, I've also set the access token duration to 2 hours.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-24-at-15.51.50.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1334\" height=\"280\" srcset=\"__GHOST_URL__/content/images/size/w600/2022/07/Screenshot-2022-07-24-at-15.51.50.png 600w, __GHOST_URL__/content/images/size/w1000/2022/07/Screenshot-2022-07-24-at-15.51.50.png 1000w, __GHOST_URL__/content/images/2022/07/Screenshot-2022-07-24-at-15.51.50.png 1334w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Session settings in HappySoup Connected App</figcaption></figure><p>So this is a best effort to keep them both in sync. They should expire at the same time. However, I'm not convinced that's always the case, so I added some extra logic...</p><h3 id=\"using-a-express-middleware-to-validate-that-both-sessions-are-still-alive\">Using a  express middleware to validate that both sessions are still alive</h3><p>An express middleware is a function that runs on the backend every time a request is made to the backend (it's more than that but let's go with that definition).</p><p>So I created a middleware to validate that both sessions are alive. The basic logic is</p><!--kg-card-begin: markdown--><ul>\n<li>Frontend makes request to backend</li>\n<li>Before any kind of processing, the an express middleware checks if the redis session is still alive\n<ul>\n<li>If it is, then we need to check if the Salesforce session is alive\n<ul>\n<li>If it is, then make whatever request it's supposed to make</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!--kg-card-end: markdown--><p>Here's how we check if the server session is alive</p><pre><code class=\"language-javascript\"> let serverSessionAlive = (req.session.oauthSuccess || req.session.oauthInfo);\n\nif(!serverSessionAlive){\n    throw new ErrorHandler(404,'session-expired','server session has expired');\n}</code></pre><p>If it's not alive, we throw an error. If it's alive, we check if the Salesforce session is alive</p><pre><code class=\"language-javascript\">let sfdcSessionAlive = await isSfdcSessionAlive(getConnection(req.session));\nif(sfdcSessionAlive) next();\t</code></pre><p>If the session is alive, we call <code>next</code> to let the express server run the next function.</p><h3 id=\"how-to-check-if-the-salesforce-session-is-alive\">How to check if the Salesforce session is alive</h3><p>I learned this bit by looking at the source code of Workbench. The <code><strong>isSfdcSessionAlive</strong></code> function does a tiny and quick API call to Salesforce, just to see if it's still alive. Think of it like a ping:</p><pre><code class=\"language-javascript\">/**\n * Quick ping to salesforce to see if the oauth token is still alive\n */\nasync function isSfdcSessionAlive(connection){\n\n    let isAlive = false;\n\n    let api = soapAPI(connection);\n    let response = await api.getServerTimestamp();\n\n    if(response['soapenv:Envelope']['soapenv:Body'].getServerTimestampResponse){\n        isAlive = true;\n    }\n\n    return isAlive;\n}</code></pre><p>The call we use is the <code><strong>getServerTimestamp</strong></code> which simply returns the timezone of the org. </p><p>So that's it! I think this works 99% of the cases :) </p><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div>","comment_id":"62dd583756c262003d4abcf4","plaintext":"Two types of sessions\n\nIn fullstack Salesforce apps like HappySoup or workbench, it's common to have a server session. This is a data structure that keeps data about the logged-in user, like their name, their Salesforce OAuth access token, etc.\n\nHere's what a session looks like in HappySoup:\n\n{\n\"cookie\": {\n\"originalMaxAge\": 7200000,\n\"expires\": \"2022-07-24T16:38:41.778Z\",\n\"httpOnly\": false,\n\"path\": \"/\"\n},\n\"oauthInfo\": {\n\"access_token\": \"00D3h000005XLUw!AQkAQNU85sx1CPE3.kzQCjA3nWYN3CzqUW8UuFWbFhq34L8HT6nx3me3tQYC6wqBhgzwj28.W5ajpTFBbOrfgiyusBmHJObU\",\n\"refresh_token\": \"5Aep8616SrrNkkMrFtLqxeGveyBRBoJWaQnLgb4KW4dBRFLaKp55qujTNnaD3zIHDeF3kGQDIwaDOX21KXnlX3f\",\n\"signature\": \"PIsSZEa2u0QVPEvgkGdLsssaVkunBZDeNvfVTPf5zso=\",\n\"scope\": \"refresh_token web id api\",\n\"instance_url\": \"https://brave-raccoon-mm7crl-dev-ed.my.salesforce.com\",\n\"id\": \"https://login.salesforce.com/id/00D3h000005XLUwEAO/0053h000002JF4cAAG\",\n\"token_type\": \"Bearer\",\n\"issued_at\": \"1658673508030\"\n},\n\"oauthSuccess\": true,\n\"cache\": {4 items},\n\"identity\": {\n\"username\": \"pgonzaleznetwork@brave-raccoon-mm7crl.com\",\n\"name\": \"Pablo Gonzalez Alvarez\",\n\"orgId\": \"00D3h000005XLUwEAO\",\n\"userId\": \"0053h000002JF4cAAG\",\n\"url\": \"https://brave-raccoon-mm7crl-dev-ed.my.salesforce.com\",\n\"env\": \"Production\"\n}\n}\n\nThese sessions typically are finite, they expire at a preconfigured time, resulting in the user being logged out the moment they try to interact with the app; I'm sure you've seen this behavior when you leave your Salesforce org open for a while.\n\nBut these fullstack apps also have the Salesforce access token/session Id stored in the server session. And this session also expires at some point (configured in the connected app, as we'll see later).\n\nWhat happens if the salesforce access token expires, but the server session is still alive? Then the user would be able to interact with the app, but the app won't be able to contact Salesforce because the token is no longer valid.\n\nSo, how do you keep these 2 sessions in sync?\n\n\nSetting a time-to-live for both sessions\n\nIn the case of HappySoup, I'm using express sessions with a Redis database. The session id is sent back to the browser as a cookie. Every request to the backend will have this cookie in the headers, and that's how we match the session.\n\nIn my session configuration, I have specified a TTL (time-to-live) value of 2 hours\n\nconst EXPIRE_TIME = 7200000;\n\nlet sessionStore = new RedisStore({\n  host: redisConfig.host, \n  port: redisConfig.port, \n  client: redisClient,\n  ttl:EXPIRE_TIME,\n  disableTouch:true,\n  prefix:'sfhs-sess:'\n});\n\nIn the Salesforce connected app that controls HappySoup, I've also set the access token duration to 2 hours.\n\nSo this is a best effort to keep them both in sync. They should expire at the same time. However, I'm not convinced that's always the case, so I added some extra logic...\n\n\nUsing a  express middleware to validate that both sessions are still alive\n\nAn express middleware is a function that runs on the backend every time a request is made to the backend (it's more than that but let's go with that definition).\n\nSo I created a middleware to validate that both sessions are alive. The basic logic is\n\n * Frontend makes request to backend\n * Before any kind of processing, the an express middleware checks if the redis session is still alive\n   \n   * If it is, then we need to check if the Salesforce session is alive\n     \n     * If it is, then make whatever request it's supposed to make\n     \n   \n\n\nHere's how we check if the server session is alive\n\n let serverSessionAlive = (req.session.oauthSuccess || req.session.oauthInfo);\n\nif(!serverSessionAlive){\n    throw new ErrorHandler(404,'session-expired','server session has expired');\n}\n\nIf it's not alive, we throw an error. If it's alive, we check if the Salesforce session is alive\n\nlet sfdcSessionAlive = await isSfdcSessionAlive(getConnection(req.session));\nif(sfdcSessionAlive) next();\t\n\nIf the session is alive, we call next to let the express server run the next function.\n\n\nHow to check if the Salesforce session is alive\n\nI learned this bit by looking at the source code of Workbench. The isSfdcSessionAlive function does a tiny and quick API call to Salesforce, just to see if it's still alive. Think of it like a ping:\n\n/**\n * Quick ping to salesforce to see if the oauth token is still alive\n */\nasync function isSfdcSessionAlive(connection){\n\n    let isAlive = false;\n\n    let api = soapAPI(connection);\n    let response = await api.getServerTimestamp();\n\n    if(response['soapenv:Envelope']['soapenv:Body'].getServerTimestampResponse){\n        isAlive = true;\n    }\n\n    return isAlive;\n}\n\nThe call we use is the getServerTimestamp which simply returns the timezone of the org.\n\nSo that's it! I think this works 99% of the cases :)\n\n💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) ","feature_image":"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-31-at-23.34.01.png","featured":0,"type":"post","status":"draft","locale":null,"visibility":"paid","email_recipient_filter":"all","created_at":"2022-07-24T14:33:27.000Z","updated_at":"2022-08-04T14:23:42.000Z","published_at":"2022-07-24T15:03:56.000Z","custom_excerpt":"Express middlewares can help us ensure that the Salesforce API session is still alive in fullstack Salesforce apps","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62ddc26f56c262003d4abd65","uuid":"fd3b68de-b29d-4c24-b323-dd4f8eb1ca21","title":"The rise of the fullstack Salesforce developer","slug":"the-rise-of-the-fullstack-salesforce-developer","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"* HappySoup: For org impact analysis (which I created)\\n* JetStream: Automating many different tasks in your Salesforce org\\n* Organizer: Does so much!\\n* Salesforce Inspector: The tool of tools\\n* Many many more\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[],\"sections\":[[1,\"h3\",[[0,[],0,\"Salesforce Developer vs Fullstack Developer\"]]],[1,\"p\",[[0,[],0,\"A traditional Salesforce developer spends most of their time working with Apex and JavaScript (in LWC). At this stage, for the most part, this can be considered a fullstack development role; LWC in the frontend, and Apex in the backend. \"]]],[1,\"p\",[[0,[],0,\"However, for people outside of the Salesforce ecosystem, this would be almost considered a business application role, with some programming involved. \"]]],[1,\"p\",[[0,[],0,\"Most recruiters think that \\\"real\\\" fullstack developers are those who work with shiny JavaScript frameworks, Node.js, Python, Docker, AWS, etc.\"]]],[1,\"h3\",[[0,[],0,\"A slow movement of indie makers\"]]],[1,\"p\",[[0,[],0,\"Over the last few years, I've noticed a slow but steady movement. More and more Salesforce devs have started to learn more traditional software engineering principles, programming languages, frameworks, etc.\"]]],[1,\"p\",[[0,[],0,\"This has resulted in some amazing fullstack web applications that can only be built by those who truly understand the Salesforce platform and the pain points of its users. For example\"]]],[10,0],[1,\"p\",[[0,[],0,\"All of these were created by what is known as indie makers; simple individuals. not companies with an entire team of developers.\"]]],[1,\"p\",[[0,[],0,\"What's amazing about these apps is that because they are fullstack apps, they bypass many of the limitations of managed packages, but because their authors know Salesforce so well and master the APIs, they can deliver really amazing user experiences. \"]]],[1,\"h3\",[[0,[],0,\"A new place to learn how to become a fullstack Salesforce dev\"]]],[1,\"p\",[[0,[],0,\"The challenge is that it's really hard to learn all the skills required to get to this level. First, you need to be an expert in Salesforce. And then, you need to learn this wide range of different technologies and stacks on top of that.\"]]],[1,\"p\",[[0,[],0,\"There isn't a dedicated resource for those developers looking to move beyond Apex and create what I call, fullstack Salesforce apps: fullstack apps that use the Salesforce API to deliver amazing experiences. \"]]],[1,\"p\",[[0,[],0,\"Well, now there is. This blog is exclusively dedicated to teaching Salesforce devs everything they need to know to become fullstack Salesforce devs.\"]]],[10,1],[1,\"p\",[]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"salesforce-developer-vs-fullstack-developer\">Salesforce Developer vs Fullstack Developer</h3><p>A traditional Salesforce developer spends most of their time working with Apex and JavaScript (in LWC). At this stage, for the most part, this can be considered a fullstack development role; LWC in the frontend, and Apex in the backend. </p><p>However, for people outside of the Salesforce ecosystem, this would be almost considered a business application role, with some programming involved. </p><p>Most recruiters think that \"real\" fullstack developers are those who work with shiny JavaScript frameworks, Node.js, Python, Docker, AWS, etc.</p><h3 id=\"a-slow-movement-of-indie-makers\">A slow movement of indie makers</h3><p>Over the last few years, I've noticed a slow but steady movement. More and more Salesforce devs have started to learn more traditional software engineering principles, programming languages, frameworks, etc.</p><p>This has resulted in some amazing fullstack web applications that can only be built by those who truly understand the Salesforce platform and the pain points of its users. For example</p><!--kg-card-begin: markdown--><ul>\n<li>HappySoup: For org impact analysis (which I created)</li>\n<li>JetStream: Automating many different tasks in your Salesforce org</li>\n<li>Organizer: Does so much!</li>\n<li>Salesforce Inspector: The tool of tools</li>\n<li>Many many more</li>\n</ul>\n<!--kg-card-end: markdown--><p>All of these were created by what is known as indie makers; simple individuals. not companies with an entire team of developers.</p><p>What's amazing about these apps is that because they are fullstack apps, they bypass many of the limitations of managed packages, but because their authors know Salesforce so well and master the APIs, they can deliver really amazing user experiences. </p><h3 id=\"a-new-place-to-learn-how-to-become-a-fullstack-salesforce-dev\">A new place to learn how to become a fullstack Salesforce dev</h3><p>The challenge is that it's really hard to learn all the skills required to get to this level. First, you need to be an expert in Salesforce. And then, you need to learn this wide range of different technologies and stacks on top of that.</p><p>There isn't a dedicated resource for those developers looking to move beyond Apex and create what I call, fullstack Salesforce apps: fullstack apps that use the Salesforce API to deliver amazing experiences. </p><p>Well, now there is. This blog is exclusively dedicated to teaching Salesforce devs everything they need to know to become fullstack Salesforce devs.</p><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div><p></p>","comment_id":"62ddc26f56c262003d4abd65","plaintext":"Salesforce Developer vs Fullstack Developer\n\nA traditional Salesforce developer spends most of their time working with Apex and JavaScript (in LWC). At this stage, for the most part, this can be considered a fullstack development role; LWC in the frontend, and Apex in the backend.\n\nHowever, for people outside of the Salesforce ecosystem, this would be almost considered a business application role, with some programming involved.\n\nMost recruiters think that \"real\" fullstack developers are those who work with shiny JavaScript frameworks, Node.js, Python, Docker, AWS, etc.\n\n\nA slow movement of indie makers\n\nOver the last few years, I've noticed a slow but steady movement. More and more Salesforce devs have started to learn more traditional software engineering principles, programming languages, frameworks, etc.\n\nThis has resulted in some amazing fullstack web applications that can only be built by those who truly understand the Salesforce platform and the pain points of its users. For example\n\n * HappySoup: For org impact analysis (which I created)\n * JetStream: Automating many different tasks in your Salesforce org\n * Organizer: Does so much!\n * Salesforce Inspector: The tool of tools\n * Many many more\n\n\nAll of these were created by what is known as indie makers; simple individuals. not companies with an entire team of developers.\n\nWhat's amazing about these apps is that because they are fullstack apps, they bypass many of the limitations of managed packages, but because their authors know Salesforce so well and master the APIs, they can deliver really amazing user experiences.\n\n\nA new place to learn how to become a fullstack Salesforce dev\n\nThe challenge is that it's really hard to learn all the skills required to get to this level. First, you need to be an expert in Salesforce. And then, you need to learn this wide range of different technologies and stacks on top of that.\n\nThere isn't a dedicated resource for those developers looking to move beyond Apex and create what I call, fullstack Salesforce apps: fullstack apps that use the Salesforce API to deliver amazing experiences.\n\nWell, now there is. This blog is exclusively dedicated to teaching Salesforce devs everything they need to know to become fullstack Salesforce devs.\n\n💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) \n\n","feature_image":"https://images.unsplash.com/photo-1607799279861-4dd421887fb3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDQ1fHxzb2Z0d2FyZSUyMGRldmVsb3BlcnxlbnwwfHx8fDE2NTkxOTEwMjM&ixlib=rb-1.2.1&q=80&w=2000","featured":1,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-07-24T22:06:39.000Z","updated_at":"2022-07-31T23:42:18.000Z","published_at":"2022-06-24T22:36:00.000Z","custom_excerpt":"A new Salesforce role has been lurking in the background","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62e2d2aff795c9003dcdf0b9","uuid":"60f23a5e-0249-4a69-a67c-9debe7eae7cc","title":"Parallel Salesforce metadata retrieval with Promise.all(), array.map() and the Composite API","slug":"parallel-salesforce-metadata-retrieval-with-promise-all-array-map-and-the-composite-api","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"email\",{\"html\":\"<p>THE CODE BELOW LOOKS MUCH BETTER IN THE BROWSER</p>\"}],[\"code\",{\"language\":\"json\",\"code\":\"[\\n  {\\n    \\\"attributes\\\": {\\n      \\\"type\\\": \\\"FlexiPage\\\",\\n      \\\"url\\\": \\\"/services/data/v55.0/tooling/sobjects/FlexiPage/0M03h000003bedLCAQ\\\"\\n    },\\n    \\\"Id\\\": \\\"0M03h000003bedLCAQ\\\",\\n    \\\"Metadata\\\": {\\n      \\\"description\\\": null,\\n      \\\"events\\\": [],\\n      \\\"flexiPageRegions\\\": [\\n        ...// a lot of stuff\\n                \\\"componentName\\\": \\\"flexipage:richText\\\",\\n                \\\"flexipageDataSources\\\": null,\\n                \\\"identifier\\\": \\\"flexipage_richText\\\",\\n                \\\"visibilityRule\\\": {\\n                  \\\"booleanFilter\\\": null,\\n                  \\\"criteria\\\": [\\n                    {\\n                      \\\"leftValue\\\": \\\"{!Record.CustomerPriority__c}\\\",\\n                      \\\"operator\\\": \\\"EQUAL\\\",\\n                      \\\"rightValue\\\": \\\"High\\\"\\n                    }\\n                  ]\\n                }\\n              },\\n              \\\"fieldInstance\\\": null\\n            }\\n         //more stuff\\n      ],\\n      \\\"masterLabel\\\": \\\"Account Record Page\\\",\\n      //more stuff here\\n    }\\n  }\\n]\"}],[\"paywall\",{}],[\"code\",{\"language\":\"json\",\"code\":\"\\\"criteria\\\": [\\n    {\\n    \\\"leftValue\\\": \\\"{!Record.CustomerPriority__c}\\\",\\n    \\\"operator\\\": \\\"EQUAL\\\",\\n    \\\"rightValue\\\": \\\"High\\\"\\n    }\\n ]\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"This limitation applies to all objects of the tooling API that have a <code><strong>metadata</strong></code> attribute.\",\"backgroundColor\":\"red\"}],[\"code\",{\"language\":\"json\",\"code\":\"\\\"attributes\\\": {\\n      \\\"type\\\": \\\"FlexiPage\\\",\\n      \\\"url\\\": \\\"/services/data/v55.0/tooling/sobjects/FlexiPage/0M03h000000fopJCAQ\\\"\\n}\"}],[\"code\",{\"language\":\"javascript\",\"code\":\" let query = `SELECT Id FROM FlexiPage WHERE EntityDefinitionId = '${edf.entityDefinitionId}'`\\n let soql = {query,filterById:false,useToolingApi:true};\\n\\nlet rawResults = await restApi.query(soql);\"}],[\"code\",{\"language\":\"javascript\",\"code\":\" let endpoint = `${connection.url}${restEndpoint}tooling`;\\n\\nlet subRequests = metadata.map(md => { \\n\\n    let request = { \\n        method:'GET',\\n        url:`${restEndpoint}tooling/sobjects/${md.type}/${md.id}`, \\n        referenceId:md.id \\n    }\\n    return request;\\n});\\n\\n//max number of subrequest per composite request\\nlet batches = splitInBatchesOf(subRequests,25);\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let data = await Promise.all(\\n\\n    compositeRequests.map(async (request) => {\\n\\n        let fetchOptions = getFetchOptions(connection.token,'POST');\\n        fetchOptions.body = JSON.stringify(request);\\n\\n        try {\\n\\n            let res = await fetch(compositeEndpoint,fetchOptions);\\n            let json = await res.json();\\n\\n            return json;\\n\\n        } catch (error) {\\n            //do nothing, we'll process the other requests, this is a partial success operation\\n        }\\n    })\\n)\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"That's <strong>four</strong> API calls instead of a hundred!\",\"backgroundColor\":\"yellow\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"compositeRequests.map(async (request) => {\"}],[\"markdown\",{\"markdown\":\"1. Query the Ids of the records in question (which will return a URL)\\n2. Group those URLs in batches of 25, where each batch is a Composite Request\\n3. Send all the composite requests in a single API call, using Promise.all() and Array.map()\"}],[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"a\",[\"href\",\"https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/tooling_requests_composite_composite.htm#subrequest\"]],[\"a\",[\"href\",\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"When creating fullstack Salesforce apps that work with Salesforce metadata, it's common to want to retrieve the metadata of certain records to do some processing, display them in the UI, etc.\"]]],[1,\"p\",[[0,[],0,\"For example, I may want to inspect the metadata of a FlexiPage, to see which custom fields are being used by it (since this is not supported by the Dependency API).\"]]],[1,\"h3\",[[0,[],0,\"Metadata attribute in Tooling API\"]]],[1,\"p\",[[0,[],0,\"The Tooling API provides a \"],[0,[0,1],2,\"metadata\"],[0,[],0,\" attribute that is present in most objects. Let's see it in action:\"]]],[10,0],[1,\"p\",[[0,[0,1],2,\"SELECT Metadata FROM FlexiPage LIMIT 1\"]]],[10,1],[1,\"p\",[[0,[],0,\"This is great. Now, I can see that the \"],[0,[0,1],2,\"CustomerPriority__c\"],[0,[],0,\" field is being used in a visibility rule\"]]],[10,2],[10,3],[1,\"h3\",[[0,[],0,\"Limitations\"]]],[1,\"p\",[[0,[],0,\"The problem is this \"],[0,[0,1],2,\"metadata\"],[0,[],0,\" attribute is only available if you limit your SOQL query to return \"],[0,[1],1,\"only one\"],[0,[],0,\" result. So, the below query fails\"]]],[1,\"p\",[[0,[0,1],2,\"SELECT Id, metadata FROM FlexiPage\"]]],[1,\"blockquote\",[[0,[0,1],2,\"MALFORMED_QUERY: When retrieving results with Metadata or FullName fields, the query qualificatio​ns must specify no more than one row for retrieval. Result size: 11\"]]],[1,\"p\",[[0,[],0,\"This renders this functionality almost useless. If an org has 50 FlexiPages, I need to issue 50 distinct queries, which means 50 calls to the Tooling API.\"]]],[10,4],[1,\"p\",[[0,[],0,\"So, how can we optimize this?\"]]],[1,\"h3\",[[0,[],0,\"Optimization with Composite API\"]]],[1,\"p\",[[0,[],0,\"Turns out, that if you query any field of a tooling API object, you also get back a URL that points to that record\"]]],[10,5],[1,\"p\",[[0,[],0,\"You can take this URL and hit it with a \"],[0,[0,1],2,\"GET\"],[0,[],0,\" request on workbench or postman, and you get the\"],[0,[1],1,\" entire metadata\"],[0,[],0,\" of the record, just as if you had queried the \"],[0,[0,1],2,\"metadata\"],[0,[],0,\" attribute.\"]]],[1,\"p\",[[0,[],0,\"So what we can do is use this URL in a \"],[0,[2],1,\"Composite Request of the Tooling API\"],[0,[],0,\". I'll spare you the details because you can read the docs, but basically, you are able to pass 25 URLs in a single request object, and make one API call to get the information of those URLs. \"]]],[1,\"p\",[[0,[],0,\"So if we have 100 FlexiPages, we can query the \"],[0,[0,1],2,\"Id\"],[0,[],0,\" of all of them with a simple query. The result will have 100 URLs.\"]]],[10,6],[1,\"p\",[[0,[],0,\"We can then take those 100 URLs,  group them in batches of 25, and make each batch a composite API request. \"]]],[10,7],[1,\"p\",[[0,[],0,\"Finally, we can hit the composite endpoint with a single API call, where each API call will return the \"],[0,[0,1],2,\"metadata\"],[0,[],0,\" of 25 records.\"]]],[10,8],[10,9],[1,\"h3\",[[0,[],0,\"Promise.all\"]]],[1,\"p\",[[0,[],0,\"Note that I'm using \"],[0,[0,1],2,\"Promise.all\"],[0,[],0,\" to send the requests in parallel, rather than one by one. This means, we send 4 API calls to salesforce at the same time, where each call has 25 URLs, resulting in one hundred \"],[0,[0,1],2,\"metadata\"],[0,[],0,\" objects.\"]]],[1,\"p\",[[0,[],0,\"Now, in reality, it wouldn't matter if I make 4 API calls one by one because the \"],[0,[1,0],2,\"Promise.all\"],[0,[],0,\" call is inside an \"],[0,[0,1],2,\"await\"],[0,[],0,\" function, which means no processing will be done until all the API calls return. Still, this results in easier-to-read code I think.\"]]],[1,\"h3\",[[0,[],0,\"Array.map()\"]]],[1,\"p\",[[0,[],0,\"Very important to note that inside \"],[0,[0,1],2,\"Promise.all\"],[0,[],0,\", I'm using \"],[0,[0,1],2,\"Array.map()\"],[0,[],0,\" as follows\"]]],[10,10],[1,\"p\",[[0,[],0,\"This is because it at the time of me writing the code, it wasn't possible to use \"],[0,[0],1,\"async\"],[0,[],0,\" inside a for loop. The correct pattern was to use \"],[0,[0,1],2,\"Array.map()\"],[0,[],0,\" to return a new array of \"],[0,[0],1,\"Promise\"],[0,[],0,\"s, and then execute all of them inside \"],[0,[0,1],2,\"Promise.all\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"There's is an \"],[0,[3],1,\"await...of iterator\"],[0,[],0,\" now that may resolve this, but I'll cover that in a future issue.  \"]]],[1,\"h3\",[[0,[],0,\"Recap\"]]],[1,\"p\",[[0,[],0,\"To retrieve large sets of metadata using the Tooling API\"]]],[10,11],[1,\"p\",[[0,[],0,\"Much better than hitting the Org API limit, no? ;)\"]]],[10,12],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>When creating fullstack Salesforce apps that work with Salesforce metadata, it's common to want to retrieve the metadata of certain records to do some processing, display them in the UI, etc.</p><p>For example, I may want to inspect the metadata of a FlexiPage, to see which custom fields are being used by it (since this is not supported by the Dependency API).</p><h3 id=\"metadata-attribute-in-tooling-api\">Metadata attribute in Tooling API</h3><p>The Tooling API provides a <code><strong>metadata</strong></code> attribute that is present in most objects. Let's see it in action:</p><p><code><strong>SELECT Metadata FROM FlexiPage LIMIT 1</strong></code></p><pre><code class=\"language-json\">[\n  {\n    \"attributes\": {\n      \"type\": \"FlexiPage\",\n      \"url\": \"/services/data/v55.0/tooling/sobjects/FlexiPage/0M03h000003bedLCAQ\"\n    },\n    \"Id\": \"0M03h000003bedLCAQ\",\n    \"Metadata\": {\n      \"description\": null,\n      \"events\": [],\n      \"flexiPageRegions\": [\n        ...// a lot of stuff\n                \"componentName\": \"flexipage:richText\",\n                \"flexipageDataSources\": null,\n                \"identifier\": \"flexipage_richText\",\n                \"visibilityRule\": {\n                  \"booleanFilter\": null,\n                  \"criteria\": [\n                    {\n                      \"leftValue\": \"{!Record.CustomerPriority__c}\",\n                      \"operator\": \"EQUAL\",\n                      \"rightValue\": \"High\"\n                    }\n                  ]\n                }\n              },\n              \"fieldInstance\": null\n            }\n         //more stuff\n      ],\n      \"masterLabel\": \"Account Record Page\",\n      //more stuff here\n    }\n  }\n]</code></pre><p>This is great. Now, I can see that the <code><strong>CustomerPriority__c</strong></code> field is being used in a visibility rule</p><!--members-only--><pre><code class=\"language-json\">\"criteria\": [\n    {\n    \"leftValue\": \"{!Record.CustomerPriority__c}\",\n    \"operator\": \"EQUAL\",\n    \"rightValue\": \"High\"\n    }\n ]</code></pre><h3 id=\"limitations\">Limitations</h3><p>The problem is this <code><strong>metadata</strong></code> attribute is only available if you limit your SOQL query to return <strong>only one</strong> result. So, the below query fails</p><p><code><strong>SELECT Id, metadata FROM FlexiPage</strong></code></p><blockquote><code><strong>MALFORMED_QUERY: When retrieving results with Metadata or FullName fields, the query qualificatio​ns must specify no more than one row for retrieval. Result size: 11</strong></code></blockquote><p>This renders this functionality almost useless. If an org has 50 FlexiPages, I need to issue 50 distinct queries, which means 50 calls to the Tooling API.</p><div class=\"kg-card kg-callout-card kg-callout-card-red\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">This limitation applies to all objects of the tooling API that have a <code><strong>metadata</strong></code> attribute.</div></div><p>So, how can we optimize this?</p><h3 id=\"optimization-with-composite-api\">Optimization with Composite API</h3><p>Turns out, that if you query any field of a tooling API object, you also get back a URL that points to that record</p><pre><code class=\"language-json\">\"attributes\": {\n      \"type\": \"FlexiPage\",\n      \"url\": \"/services/data/v55.0/tooling/sobjects/FlexiPage/0M03h000000fopJCAQ\"\n}</code></pre><p>You can take this URL and hit it with a <code><strong>GET</strong></code> request on workbench or postman, and you get the<strong> entire metadata</strong> of the record, just as if you had queried the <code><strong>metadata</strong></code> attribute.</p><p>So what we can do is use this URL in a <a href=\"https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/tooling_requests_composite_composite.htm#subrequest\">Composite Request of the Tooling API</a>. I'll spare you the details because you can read the docs, but basically, you are able to pass 25 URLs in a single request object, and make one API call to get the information of those URLs. </p><p>So if we have 100 FlexiPages, we can query the <code><strong>Id</strong></code> of all of them with a simple query. The result will have 100 URLs.</p><pre><code class=\"language-javascript\"> let query = `SELECT Id FROM FlexiPage WHERE EntityDefinitionId = '${edf.entityDefinitionId}'`\n let soql = {query,filterById:false,useToolingApi:true};\n\nlet rawResults = await restApi.query(soql);</code></pre><p>We can then take those 100 URLs,  group them in batches of 25, and make each batch a composite API request. </p><pre><code class=\"language-javascript\"> let endpoint = `${connection.url}${restEndpoint}tooling`;\n\nlet subRequests = metadata.map(md =&gt; { \n\n    let request = { \n        method:'GET',\n        url:`${restEndpoint}tooling/sobjects/${md.type}/${md.id}`, \n        referenceId:md.id \n    }\n    return request;\n});\n\n//max number of subrequest per composite request\nlet batches = splitInBatchesOf(subRequests,25);</code></pre><p>Finally, we can hit the composite endpoint with a single API call, where each API call will return the <code><strong>metadata</strong></code> of 25 records.</p><pre><code class=\"language-javascript\">let data = await Promise.all(\n\n    compositeRequests.map(async (request) =&gt; {\n\n        let fetchOptions = getFetchOptions(connection.token,'POST');\n        fetchOptions.body = JSON.stringify(request);\n\n        try {\n\n            let res = await fetch(compositeEndpoint,fetchOptions);\n            let json = await res.json();\n\n            return json;\n\n        } catch (error) {\n            //do nothing, we'll process the other requests, this is a partial success operation\n        }\n    })\n)</code></pre><div class=\"kg-card kg-callout-card kg-callout-card-yellow\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">That's <strong>four</strong> API calls instead of a hundred!</div></div><h3 id=\"promiseall\">Promise.all</h3><p>Note that I'm using <code><strong>Promise.all</strong></code> to send the requests in parallel, rather than one by one. This means, we send 4 API calls to salesforce at the same time, where each call has 25 URLs, resulting in one hundred <code><strong>metadata</strong></code> objects.</p><p>Now, in reality, it wouldn't matter if I make 4 API calls one by one because the <strong><code>Promise.all</code></strong> call is inside an <code><strong>await</strong></code> function, which means no processing will be done until all the API calls return. Still, this results in easier-to-read code I think.</p><h3 id=\"arraymap\">Array.map()</h3><p>Very important to note that inside <code><strong>Promise.all</strong></code>, I'm using <code><strong>Array.map()</strong></code> as follows</p><pre><code class=\"language-javascript\">compositeRequests.map(async (request) =&gt; {</code></pre><p>This is because it at the time of me writing the code, it wasn't possible to use <code>async</code> inside a for loop. The correct pattern was to use <code><strong>Array.map()</strong></code> to return a new array of <code>Promise</code>s, and then execute all of them inside <code><strong>Promise.all</strong></code>.</p><p>There's is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\">await...of iterator</a> now that may resolve this, but I'll cover that in a future issue.  </p><h3 id=\"recap\">Recap</h3><p>To retrieve large sets of metadata using the Tooling API</p><!--kg-card-begin: markdown--><ol>\n<li>Query the Ids of the records in question (which will return a URL)</li>\n<li>Group those URLs in batches of 25, where each batch is a Composite Request</li>\n<li>Send all the composite requests in a single API call, using Promise.all() and Array.map()</li>\n</ol>\n<!--kg-card-end: markdown--><p>Much better than hitting the Org API limit, no? ;)</p><div class=\"kg-card kg-callout-card kg-callout-card-accent\"><div class=\"kg-callout-emoji\">💡</div><div class=\"kg-callout-text\">If you found this article useful, <a href=\"__GHOST_URL__/#/portal/signup\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;</div></div>","comment_id":"62e2d2aff795c9003dcdf0b9","plaintext":"When creating fullstack Salesforce apps that work with Salesforce metadata, it's common to want to retrieve the metadata of certain records to do some processing, display them in the UI, etc.\n\nFor example, I may want to inspect the metadata of a FlexiPage, to see which custom fields are being used by it (since this is not supported by the Dependency API).\n\n\nMetadata attribute in Tooling API\n\nThe Tooling API provides a metadata attribute that is present in most objects. Let's see it in action:\n\nSELECT Metadata FROM FlexiPage LIMIT 1\n\n[\n  {\n    \"attributes\": {\n      \"type\": \"FlexiPage\",\n      \"url\": \"/services/data/v55.0/tooling/sobjects/FlexiPage/0M03h000003bedLCAQ\"\n    },\n    \"Id\": \"0M03h000003bedLCAQ\",\n    \"Metadata\": {\n      \"description\": null,\n      \"events\": [],\n      \"flexiPageRegions\": [\n        ...// a lot of stuff\n                \"componentName\": \"flexipage:richText\",\n                \"flexipageDataSources\": null,\n                \"identifier\": \"flexipage_richText\",\n                \"visibilityRule\": {\n                  \"booleanFilter\": null,\n                  \"criteria\": [\n                    {\n                      \"leftValue\": \"{!Record.CustomerPriority__c}\",\n                      \"operator\": \"EQUAL\",\n                      \"rightValue\": \"High\"\n                    }\n                  ]\n                }\n              },\n              \"fieldInstance\": null\n            }\n         //more stuff\n      ],\n      \"masterLabel\": \"Account Record Page\",\n      //more stuff here\n    }\n  }\n]\n\nThis is great. Now, I can see that the CustomerPriority__c field is being used in a visibility rule\n\n\"criteria\": [\n    {\n    \"leftValue\": \"{!Record.CustomerPriority__c}\",\n    \"operator\": \"EQUAL\",\n    \"rightValue\": \"High\"\n    }\n ]\n\n\nLimitations\n\nThe problem is this metadata attribute is only available if you limit your SOQL query to return only one result. So, the below query fails\n\nSELECT Id, metadata FROM FlexiPage\n\nMALFORMED_QUERY: When retrieving results with Metadata or FullName fields, the query qualificatio ns must specify no more than one row for retrieval. Result size: 11\n\nThis renders this functionality almost useless. If an org has 50 FlexiPages, I need to issue 50 distinct queries, which means 50 calls to the Tooling API.\n\n💡This limitation applies to all objects of the tooling API that have a metadata attribute.\n\nSo, how can we optimize this?\n\n\nOptimization with Composite API\n\nTurns out, that if you query any field of a tooling API object, you also get back a URL that points to that record\n\n\"attributes\": {\n      \"type\": \"FlexiPage\",\n      \"url\": \"/services/data/v55.0/tooling/sobjects/FlexiPage/0M03h000000fopJCAQ\"\n}\n\nYou can take this URL and hit it with a GET request on workbench or postman, and you get the entire metadata of the record, just as if you had queried the metadata attribute.\n\nSo what we can do is use this URL in a Composite Request of the Tooling API. I'll spare you the details because you can read the docs, but basically, you are able to pass 25 URLs in a single request object, and make one API call to get the information of those URLs.\n\nSo if we have 100 FlexiPages, we can query the Id of all of them with a simple query. The result will have 100 URLs.\n\n let query = `SELECT Id FROM FlexiPage WHERE EntityDefinitionId = '${edf.entityDefinitionId}'`\n let soql = {query,filterById:false,useToolingApi:true};\n\nlet rawResults = await restApi.query(soql);\n\nWe can then take those 100 URLs,  group them in batches of 25, and make each batch a composite API request.\n\n let endpoint = `${connection.url}${restEndpoint}tooling`;\n\nlet subRequests = metadata.map(md => { \n\n    let request = { \n        method:'GET',\n        url:`${restEndpoint}tooling/sobjects/${md.type}/${md.id}`, \n        referenceId:md.id \n    }\n    return request;\n});\n\n//max number of subrequest per composite request\nlet batches = splitInBatchesOf(subRequests,25);\n\nFinally, we can hit the composite endpoint with a single API call, where each API call will return the metadata of 25 records.\n\nlet data = await Promise.all(\n\n    compositeRequests.map(async (request) => {\n\n        let fetchOptions = getFetchOptions(connection.token,'POST');\n        fetchOptions.body = JSON.stringify(request);\n\n        try {\n\n            let res = await fetch(compositeEndpoint,fetchOptions);\n            let json = await res.json();\n\n            return json;\n\n        } catch (error) {\n            //do nothing, we'll process the other requests, this is a partial success operation\n        }\n    })\n)\n\n💡That's four API calls instead of a hundred!\n\n\nPromise.all\n\nNote that I'm using Promise.all to send the requests in parallel, rather than one by one. This means, we send 4 API calls to salesforce at the same time, where each call has 25 URLs, resulting in one hundred metadata objects.\n\nNow, in reality, it wouldn't matter if I make 4 API calls one by one because the Promise.all call is inside an await function, which means no processing will be done until all the API calls return. Still, this results in easier-to-read code I think.\n\n\nArray.map()\n\nVery important to note that inside Promise.all, I'm using Array.map() as follows\n\ncompositeRequests.map(async (request) => {\n\nThis is because it at the time of me writing the code, it wasn't possible to use async inside a for loop. The correct pattern was to use Array.map() to return a new array of Promises, and then execute all of them inside Promise.all.\n\nThere's is an await...of iterator now that may resolve this, but I'll cover that in a future issue.  \n\n\nRecap\n\nTo retrieve large sets of metadata using the Tooling API\n\n 1. Query the Ids of the records in question (which will return a URL)\n 2. Group those URLs in batches of 25, where each batch is a Composite Request\n 3. Send all the composite requests in a single API call, using Promise.all() and Array.map()\n\n\nMuch better than hitting the Org API limit, no? ;)\n\n💡If you found this article useful, please consider subscribing! I have big plans for subscribers in the future :) ","feature_image":"__GHOST_URL__/content/images/2022/07/Screenshot-2022-07-30-at-15.13.57.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"paid","email_recipient_filter":"all","created_at":"2022-07-28T18:17:19.000Z","updated_at":"2022-08-06T14:56:43.000Z","published_at":"2022-07-28T20:23:17.000Z","custom_excerpt":"The Tooling API has limitations to protect the performance of your Salesforce org, but we can bypass them with a bit of ES6 magic and the not-so-known Composite API.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":"62cdaf1b2d3dc80031d20250"},{"id":"62e7e887f795c9003dcdf26a","uuid":"6a7a82e3-e098-4372-a2a2-abf89356c9c1","title":"Under the code—How a Salesforce CTA created CloudToolkit.io with Python","slug":"under-the-code-cloud-toolkit","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"paywall\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://www.linkedin.com/in/benedwards44/\"]],[\"a\",[\"href\",\"https://cloudtoolkit.co/\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"In this episode of Under the Code, we learn how \"],[0,[0],1,\"Ben Edwards\"],[0,[],0,\" created one of the most popular fullstack Salesforce apps, \"],[0,[1],1,\"CloudToolkit\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"CloudToolkit provides a wide range of Salesforce tools, such as org comparison, bulk field creation, and more. Without further ado, let's see what Ben had to say.\"]]],[1,\"p\",[[0,[2],1,\"Why did you create this app?\"]]],[1,\"blockquote\",[[0,[],0,\"Originally it was to automate some of the general admin and developer tasks I was doing when working on Salesforce projects - really just to enable me to do my job easier. After I had built a couple of local scripts and apps I built these into reusable apps for other people to use as well. Although they've been around for a while now they seem to be used by a range of admins and developers.\"],[1,[],0,0]]],[1,\"p\",[[0,[2],1,\"How much planning/thinking did you do before starting to code?\"]]],[1,\"blockquote\",[[0,[],0,\"Not a lot to be perfectly honest. I had a pretty good idea of what I needed as far as functionality goes and then it was just a case of writing the code and putting things together. The applications are relatively lightweight, so there wasn't a large need for planning around SLDC, data model, infrastructure, framework etc. It was just a case of already knowing some Python + Django and running with it on Heroku.\"]]],[1,\"p\",[[0,[2],1,\"How did you choose which technologies to use (programming language, frameworks, etc)?\"]]],[1,\"blockquote\",[[0,[],0,\"All the apps run on Django and one of them on Ruby on Rails. The main decision was what I had used in the past and knew well enough to build with. I had done a bit of hobby web development using Django and had done a bit of work with Python so made sense to go with something I was familiar in. But I also really like Django, it's a fully-featured web framework supported by Heroku so it made sense anyway.\"]]],[1,\"p\",[[0,[2],1,\"At a high level, what is the architecture of this app?  What are its components?\"]]],[1,\"blockquote\",[[0,[],0,\"All the applications run on Heroku so it takes away a lot of the infrastructure management around the apps, meaning I can focus on the code and deploy. The key components would be: \"]]],[1,\"blockquote\",[[0,[],0,\"- Django web framework (https://www.djangoproject.com) \"]]],[1,\"blockquote\",[[0,[],0,\"- Heroku for server management \"]]],[1,\"blockquote\",[[0,[],0,\"- Heroku Postgres database \"]]],[1,\"blockquote\",[[0,[],0,\"- Heroku Redis for async jobs\"]]],[1,\"p\",[[0,[2],1,\"How did you learn all the technologies required to create this app? Was this pre-existing knowledge or did you learn specifically to create this app?\"]]],[10,0],[1,\"blockquote\",[[0,[],0,\"I had pre-existing knowledge in Django but still had to do a lot of learning as I went, especially in more of the complex Python development tasks. I also hadn't done much with Heroku so learning how to deploy to Heroku and manage async jobs was a bit of a learning curve but it was well documented so wasn't really too difficult to learn in the end.\"]]],[1,\"p\",[[0,[2],1,\"How did you come up with the UI? Did you review existing apps for ideas? Do you have suggestions for our readers on how to create a simple and nice UI?\"]]],[1,\"blockquote\",[[0,[],0,\"UI definitely isn't my strength so I just focussed on using existing frameworks. At the time Bootstrap CSS was popular and easy to use to really just aligned to that and updated some colours to make it a bit more unique.\"]]],[1,\"p\",[[0,[2],1,\"Did you use a CSS framework? How much CSS did you write yourself? Any lessons learned?\"]]],[1,\"blockquote\",[[0,[],0,\"Yep I used Bootstrap 3 which was pretty popular at the time and super easy to use. I do have some CSS experience so I adjusted colours and bits and pieces but for the most part relied on the framework for things like responsiveness and leveraged existing components like cards, modals, buttons etc.\"]]],[1,\"p\",[[0,[2],1,\"Any big lessons learned from creating this app?\"]]],[1,\"blockquote\",[[0,[],0,\"Building an app is one thing but maintaining and supporting it actually ends up in infinitely more effort! Because the apps are used in so many different environments, everyone had different requests and things they wanted to do. \"]]],[1,\"blockquote\",[[0,[],0,\"I was getting a lot of feature requests which I tried to fulfill early on but eventually couldn't keep up as these apps were all done in my spare time as well. Then trying to resolve bugs and issues as well was getting overwhelming. \"]]],[1,\"blockquote\",[[0,[],0,\"I had fully open-sourced the applications as well assuming others would contribute features and support but ultimately had very few contributions and no one really contributed anything to the apps.\"]]],[1,\"p\",[[0,[2],1,\"How did creating this app positively affect your career? (speaking at sf events, new job opportunities, networking, new projects, etc.)\"]]],[1,\"blockquote\",[[0,[],0,\"It definitely makes me proud that people have used and heard about the applications. I've been at Salesforce events where people know my name because they've used the apps before so that's cool. In addition, also helps with reputation in the market so I think ultimately has had quite a positive impact on my career.\"]]],[1,\"p\",[[0,[2],1,\"What advice would you give to other devs looking to create a fullstack salesforce app?\"]]],[1,\"blockquote\",[[0,[],0,\"Just go for it! If you're doing something all the time that seems like an app or script could fulfill then build that script and start from there. I think people can overcomplicate an app but in reality it's just a case of building something that makes your work easier and then it's likely others will think the same.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Wow, this was a nice one! Thank you, Ben, for such level of detail! \"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>In this episode of Under the Code, we learn how <a href=\"https://www.linkedin.com/in/benedwards44/\">Ben Edwards</a> created one of the most popular fullstack Salesforce apps, <a href=\"https://cloudtoolkit.co/\">CloudToolkit</a>.</p><p>CloudToolkit provides a wide range of Salesforce tools, such as org comparison, bulk field creation, and more. Without further ado, let's see what Ben had to say.</p><p><strong>Why did you create this app?</strong></p><blockquote>Originally it was to automate some of the general admin and developer tasks I was doing when working on Salesforce projects - really just to enable me to do my job easier. After I had built a couple of local scripts and apps I built these into reusable apps for other people to use as well. Although they've been around for a while now they seem to be used by a range of admins and developers.<br></blockquote><p><strong>How much planning/thinking did you do before starting to code?</strong></p><blockquote>Not a lot to be perfectly honest. I had a pretty good idea of what I needed as far as functionality goes and then it was just a case of writing the code and putting things together. The applications are relatively lightweight, so there wasn't a large need for planning around SLDC, data model, infrastructure, framework etc. It was just a case of already knowing some Python + Django and running with it on Heroku.</blockquote><p><strong>How did you choose which technologies to use (programming language, frameworks, etc)?</strong></p><blockquote>All the apps run on Django and one of them on Ruby on Rails. The main decision was what I had used in the past and knew well enough to build with. I had done a bit of hobby web development using Django and had done a bit of work with Python so made sense to go with something I was familiar in. But I also really like Django, it's a fully-featured web framework supported by Heroku so it made sense anyway.</blockquote><p><strong>At a high level, what is the architecture of this app?  What are its components?</strong></p><blockquote>All the applications run on Heroku so it takes away a lot of the infrastructure management around the apps, meaning I can focus on the code and deploy. The key components would be: </blockquote><blockquote>- Django web framework (https://www.djangoproject.com) </blockquote><blockquote>- Heroku for server management </blockquote><blockquote>- Heroku Postgres database </blockquote><blockquote>- Heroku Redis for async jobs</blockquote><p><strong>How did you learn all the technologies required to create this app? Was this pre-existing knowledge or did you learn specifically to create this app?</strong></p><!--members-only--><blockquote>I had pre-existing knowledge in Django but still had to do a lot of learning as I went, especially in more of the complex Python development tasks. I also hadn't done much with Heroku so learning how to deploy to Heroku and manage async jobs was a bit of a learning curve but it was well documented so wasn't really too difficult to learn in the end.</blockquote><p><strong>How did you come up with the UI? Did you review existing apps for ideas? Do you have suggestions for our readers on how to create a simple and nice UI?</strong></p><blockquote>UI definitely isn't my strength so I just focussed on using existing frameworks. At the time Bootstrap CSS was popular and easy to use to really just aligned to that and updated some colours to make it a bit more unique.</blockquote><p><strong>Did you use a CSS framework? How much CSS did you write yourself? Any lessons learned?</strong></p><blockquote>Yep I used Bootstrap 3 which was pretty popular at the time and super easy to use. I do have some CSS experience so I adjusted colours and bits and pieces but for the most part relied on the framework for things like responsiveness and leveraged existing components like cards, modals, buttons etc.</blockquote><p><strong>Any big lessons learned from creating this app?</strong></p><blockquote>Building an app is one thing but maintaining and supporting it actually ends up in infinitely more effort! Because the apps are used in so many different environments, everyone had different requests and things they wanted to do. </blockquote><blockquote>I was getting a lot of feature requests which I tried to fulfill early on but eventually couldn't keep up as these apps were all done in my spare time as well. Then trying to resolve bugs and issues as well was getting overwhelming. </blockquote><blockquote>I had fully open-sourced the applications as well assuming others would contribute features and support but ultimately had very few contributions and no one really contributed anything to the apps.</blockquote><p><strong>How did creating this app positively affect your career? (speaking at sf events, new job opportunities, networking, new projects, etc.)</strong></p><blockquote>It definitely makes me proud that people have used and heard about the applications. I've been at Salesforce events where people know my name because they've used the apps before so that's cool. In addition, also helps with reputation in the market so I think ultimately has had quite a positive impact on my career.</blockquote><p><strong>What advice would you give to other devs looking to create a fullstack salesforce app?</strong></p><blockquote>Just go for it! If you're doing something all the time that seems like an app or script could fulfill then build that script and start from there. I think people can overcomplicate an app but in reality it's just a case of building something that makes your work easier and then it's likely others will think the same.</blockquote><hr><p>Wow, this was a nice one! Thank you, Ben, for such level of detail! </p>","comment_id":"62e7e887f795c9003dcdf26a","plaintext":"In this episode of Under the Code, we learn how Ben Edwards created one of the most popular fullstack Salesforce apps, CloudToolkit.\n\nCloudToolkit provides a wide range of Salesforce tools, such as org comparison, bulk field creation, and more. Without further ado, let's see what Ben had to say.\n\nWhy did you create this app?\n\nOriginally it was to automate some of the general admin and developer tasks I was doing when working on Salesforce projects - really just to enable me to do my job easier. After I had built a couple of local scripts and apps I built these into reusable apps for other people to use as well. Although they've been around for a while now they seem to be used by a range of admins and developers.\n\n\nHow much planning/thinking did you do before starting to code?\n\nNot a lot to be perfectly honest. I had a pretty good idea of what I needed as far as functionality goes and then it was just a case of writing the code and putting things together. The applications are relatively lightweight, so there wasn't a large need for planning around SLDC, data model, infrastructure, framework etc. It was just a case of already knowing some Python + Django and running with it on Heroku.\n\nHow did you choose which technologies to use (programming language, frameworks, etc)?\n\nAll the apps run on Django and one of them on Ruby on Rails. The main decision was what I had used in the past and knew well enough to build with. I had done a bit of hobby web development using Django and had done a bit of work with Python so made sense to go with something I was familiar in. But I also really like Django, it's a fully-featured web framework supported by Heroku so it made sense anyway.\n\nAt a high level, what is the architecture of this app?  What are its components?\n\nAll the applications run on Heroku so it takes away a lot of the infrastructure management around the apps, meaning I can focus on the code and deploy. The key components would be:\n\n- Django web framework (https://www.djangoproject.com)\n\n- Heroku for server management\n\n- Heroku Postgres database\n\n- Heroku Redis for async jobs\n\nHow did you learn all the technologies required to create this app? Was this pre-existing knowledge or did you learn specifically to create this app?\n\nI had pre-existing knowledge in Django but still had to do a lot of learning as I went, especially in more of the complex Python development tasks. I also hadn't done much with Heroku so learning how to deploy to Heroku and manage async jobs was a bit of a learning curve but it was well documented so wasn't really too difficult to learn in the end.\n\nHow did you come up with the UI? Did you review existing apps for ideas? Do you have suggestions for our readers on how to create a simple and nice UI?\n\nUI definitely isn't my strength so I just focussed on using existing frameworks. At the time Bootstrap CSS was popular and easy to use to really just aligned to that and updated some colours to make it a bit more unique.\n\nDid you use a CSS framework? How much CSS did you write yourself? Any lessons learned?\n\nYep I used Bootstrap 3 which was pretty popular at the time and super easy to use. I do have some CSS experience so I adjusted colours and bits and pieces but for the most part relied on the framework for things like responsiveness and leveraged existing components like cards, modals, buttons etc.\n\nAny big lessons learned from creating this app?\n\nBuilding an app is one thing but maintaining and supporting it actually ends up in infinitely more effort! Because the apps are used in so many different environments, everyone had different requests and things they wanted to do.\n\nI was getting a lot of feature requests which I tried to fulfill early on but eventually couldn't keep up as these apps were all done in my spare time as well. Then trying to resolve bugs and issues as well was getting overwhelming.\n\nI had fully open-sourced the applications as well assuming others would contribute features and support but ultimately had very few contributions and no one really contributed anything to the apps.\n\nHow did creating this app positively affect your career? (speaking at sf events, new job opportunities, networking, new projects, etc.)\n\nIt definitely makes me proud that people have used and heard about the applications. I've been at Salesforce events where people know my name because they've used the apps before so that's cool. In addition, also helps with reputation in the market so I think ultimately has had quite a positive impact on my career.\n\nWhat advice would you give to other devs looking to create a fullstack salesforce app?\n\nJust go for it! If you're doing something all the time that seems like an app or script could fulfill then build that script and start from there. I think people can overcomplicate an app but in reality it's just a case of building something that makes your work easier and then it's likely others will think the same.\n\nWow, this was a nice one! Thank you, Ben, for such level of detail!","feature_image":"__GHOST_URL__/content/images/2022/08/Screenshot-2022-08-01-at-16.08.40.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"paid","email_recipient_filter":"status:-free","created_at":"2022-08-01T14:51:51.000Z","updated_at":"2022-08-05T19:56:50.000Z","published_at":"2022-08-01T15:17:10.000Z","custom_excerpt":"Ben Edwards, Salesforce CTA, spills the beans on the patterns he followed to create his pioneer fullstack salesforce app","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":"62cdaf1b2d3dc80031d20250"},{"id":"62e982c91465e8003dd3e916","uuid":"9ddcb889-0aa4-4ac3-8140-926be298f051","title":"Stackforce is free for YOU","slug":"for-your-vote-of-confidence","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"* Have any feedback\\n* Want to write a guest post\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Hi all,\"]]],[1,\"p\",[[0,[],0,\"You are receiving this email because you signed up to Stackforce before the official launch yesterday. \"]]],[1,\"p\",[[0,[],0,\"I realized it may not have been obvious that since the launch, Stackforce is a paid blog/newsletter, costing $6 a month.\"]]],[1,\"p\",[[0,[],0,\"Since you signed up before the official launch and gave me your vote of confidence, you are in an \"],[0,[0],1,\"unlimited complimentary pass that will not expire.\"],[0,[],0,\" \"]]],[1,\"p\",[[0,[],0,\"Any other person who wants to read the blog will have to get a paid subscription. \"]]],[1,\"p\",[[0,[],0,\"This may sound outrageous but just think of it as a long-running book or Udemy course; those are also paid :)\"]]],[1,\"p\",[[0,[],0,\"I also already got 2 paid users last night, which gives me confidence that the content is good and not something you'd find in other Salesforce (free) blogs. \"]]],[1,\"p\",[[0,[],0,\"Anyway, I hope you have enjoyed the content so far, and do reach out to me if you:\"]]],[10,0],[1,\"p\",[[0,[],0,\"Thanks,\"]]],[1,\"p\",[[0,[],0,\"Pablo\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Hi all,</p><p>You are receiving this email because you signed up to Stackforce before the official launch yesterday. </p><p>I realized it may not have been obvious that since the launch, Stackforce is a paid blog/newsletter, costing $6 a month.</p><p>Since you signed up before the official launch and gave me your vote of confidence, you are in an <strong>unlimited complimentary pass that will not expire.</strong> </p><p>Any other person who wants to read the blog will have to get a paid subscription. </p><p>This may sound outrageous but just think of it as a long-running book or Udemy course; those are also paid :)</p><p>I also already got 2 paid users last night, which gives me confidence that the content is good and not something you'd find in other Salesforce (free) blogs. </p><p>Anyway, I hope you have enjoyed the content so far, and do reach out to me if you:</p><!--kg-card-begin: markdown--><ul>\n<li>Have any feedback</li>\n<li>Want to write a guest post</li>\n</ul>\n<!--kg-card-end: markdown--><p>Thanks,</p><p>Pablo</p>","comment_id":"62e982c91465e8003dd3e916","plaintext":"Hi all,\n\nYou are receiving this email because you signed up to Stackforce before the official launch yesterday.\n\nI realized it may not have been obvious that since the launch, Stackforce is a paid blog/newsletter, costing $6 a month.\n\nSince you signed up before the official launch and gave me your vote of confidence, you are in an unlimited complimentary pass that will not expire.\n\nAny other person who wants to read the blog will have to get a paid subscription.\n\nThis may sound outrageous but just think of it as a long-running book or Udemy course; those are also paid :)\n\nI also already got 2 paid users last night, which gives me confidence that the content is good and not something you'd find in other Salesforce (free) blogs.\n\nAnyway, I hope you have enjoyed the content so far, and do reach out to me if you:\n\n * Have any feedback\n * Want to write a guest post\n\n\nThanks,\n\nPablo","feature_image":null,"featured":0,"type":"post","status":"sent","locale":null,"visibility":"public","email_recipient_filter":"status:-free","created_at":"2022-08-02T20:02:17.000Z","updated_at":"2022-08-02T20:11:30.000Z","published_at":"2022-08-02T20:11:30.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":"62cdaf1b2d3dc80031d20250"},{"id":"62ed725c1465e8003dd3e9a2","uuid":"686b28f8-538b-41ec-aa1a-d06ddd0c0ec9","title":"A paid Salesforce blog!? Why?","slug":"fees","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"button\",{\"alignment\":\"center\",\"buttonText\":\"Join stackforce\",\"buttonUrl\":\"__GHOST_URL__/first-month\"}]],\"markups\":[[\"a\",[\"href\",\"https://www.salesforceben.com/\"]],[\"a\",[\"href\",\"https://www.salesforceben.com/salesforce-blogs/\"]],[\"em\"],[\"a\",[\"href\",\"https://docs.google.com/document/d/1_FAAYOLcqQkuL9StUr0hnGqLfbGJJJf5MamNhWaS0xU/edit?usp=sharing\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"It may seem outrageous that there's a fee to unlock all the articles on this microblog; after all, all Salesforce blogs are free, even trailhead!\"]]],[1,\"p\",[[0,[],0,\"So, let me take 5 min to explain the rationale behind this decision.\"]]],[1,\"h3\",[[0,[],0,\"Salesforce blogs\"]]],[1,\"p\",[[0,[],0,\"Salesforce blogs have provided incredible value to the Salesforce ecosystem.\"]]],[1,\"p\",[[0,[0],1,\"SalesforceBen\"],[0,[],0,\", the most famous Salesforce blog in the world, has provided a list of the \"],[0,[1],1,\"best blogs out there\"],[0,[],0,\" (aside from themselves 😉). I pretty much agree with this list and I visit many of these blogs regularly.\"]]],[1,\"p\",[[0,[],0,\"Many of the most popular Salesforce bloggers support themselves by selling ads space, promoted content, or using their blogs to promote other paid content such as books they've written or Udemy courses. \"]]],[1,\"p\",[[0,[],0,\"And they should! A lot of time is spent crafting blog articles so it is fair that the get some monetary ROI.\"]]],[1,\"p\",[[0,[],0,\"A problem with this support model is that the reader of the blog (you) has no saying on the quality of the content, the frequency, etc. And that's because it's free for you, so you don't really get to expect anything from it.\"]]],[1,\"p\",[[0,[],0,\"If a blogger suddenly stops blogging, there's nothing you can do about it. If the quality drops, you have to live with it. If they stop blogging about your favorite topic, you are going to have to find another one.\"]]],[1,\"h3\",[[0,[],0,\"A new support model\"]]],[1,\"p\",[[0,[],0,\"By having the reader directly support the blogger, you have a saying.\"]]],[1,\"p\",[[0,[],0,\"If my articles are not good enough, you can tell me: \"],[0,[2],1,\"hey Pablo, this content is BS, this is not what I'm paying for!\"]]],[1,\"p\",[[0,[],0,\"You can hold me accountable, and you can let me know you are not happy by canceling your subscription, something which will directly impact me.\"]]],[1,\"p\",[[0,[],0,\"Long story short, this model helps me make sure my content is really good. \"]]],[1,\"h3\",[[0,[],0,\"A highly specialized microblog\"]]],[1,\"p\",[[0,[],0,\"The only topic of this blog is the Salesforce API and how to integrate it with a fullstack web application using traditional software engineering technologies. \"]]],[1,\"p\",[[0,[],0,\"I spent 2 years building and refining HappySoup.io, and while this doesn't make me an expert, it does mean I know a thing or two about building fullstack Salesforce apps, and I can talk about it for hours. \"]]],[1,\"p\",[[0,[],0,\"There isn't a single blog out there that specializes in this topic.\"]]],[1,\"p\",[[0,[],0,\"Also, all my articles are under 5 min. I want you to be able to read an article and move on with your day, while still getting value out of it. That's why it's called a microblog.\"]]],[1,\"h3\",[[0,[],0,\"Just another medium\"]]],[1,\"p\",[[0,[],0,\"The Salesforce community is very used to paying for knowledge in the form of Salesforce books, Udemy courses, and mock exams (focus on force).\"]]],[1,\"p\",[[0,[],0,\"This is exactly the same, it's just a different medium. Think of it as an ongoing book.\"]]],[1,\"p\",[[0,[],0,\"When you sign up, you get 30 days for free. If you don't think the content is worth your money, you can cancel at any time.\"]]],[1,\"h3\",[[0,[],0,\"Reimbursement\"]]],[1,\"p\",[[0,[],0,\"Finally, most companies have the budget for learning and development such as online courses, books, etc. I'm sure you can speak to your manager and expense the cost of this blog.\"]]],[1,\"p\",[[0,[],0,\"In fact, I've created a doc template that you can send to them! \"]]],[1,\"p\",[[0,[3],1,\"Stackforce Reimbursement Template\"]]],[1,\"p\",[[0,[],0,\"I hope to see you here again!\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>It may seem outrageous that there's a fee to unlock all the articles on this microblog; after all, all Salesforce blogs are free, even trailhead!</p><p>So, let me take 5 min to explain the rationale behind this decision.</p><h3 id=\"salesforce-blogs\">Salesforce blogs</h3><p>Salesforce blogs have provided incredible value to the Salesforce ecosystem.</p><p><a href=\"https://www.salesforceben.com/\">SalesforceBen</a>, the most famous Salesforce blog in the world, has provided a list of the <a href=\"https://www.salesforceben.com/salesforce-blogs/\">best blogs out there</a> (aside from themselves 😉). I pretty much agree with this list and I visit many of these blogs regularly.</p><p>Many of the most popular Salesforce bloggers support themselves by selling ads space, promoted content, or using their blogs to promote other paid content such as books they've written or Udemy courses. </p><p>And they should! A lot of time is spent crafting blog articles so it is fair that the get some monetary ROI.</p><p>A problem with this support model is that the reader of the blog (you) has no saying on the quality of the content, the frequency, etc. And that's because it's free for you, so you don't really get to expect anything from it.</p><p>If a blogger suddenly stops blogging, there's nothing you can do about it. If the quality drops, you have to live with it. If they stop blogging about your favorite topic, you are going to have to find another one.</p><h3 id=\"a-new-support-model\">A new support model</h3><p>By having the reader directly support the blogger, you have a saying.</p><p>If my articles are not good enough, you can tell me: <em>hey Pablo, this content is BS, this is not what I'm paying for!</em></p><p>You can hold me accountable, and you can let me know you are not happy by canceling your subscription, something which will directly impact me.</p><p>Long story short, this model helps me make sure my content is really good. </p><h3 id=\"a-highly-specialized-microblog\">A highly specialized microblog</h3><p>The only topic of this blog is the Salesforce API and how to integrate it with a fullstack web application using traditional software engineering technologies. </p><p>I spent 2 years building and refining HappySoup.io, and while this doesn't make me an expert, it does mean I know a thing or two about building fullstack Salesforce apps, and I can talk about it for hours. </p><p>There isn't a single blog out there that specializes in this topic.</p><p>Also, all my articles are under 5 min. I want you to be able to read an article and move on with your day, while still getting value out of it. That's why it's called a microblog.</p><h3 id=\"just-another-medium\">Just another medium</h3><p>The Salesforce community is very used to paying for knowledge in the form of Salesforce books, Udemy courses, and mock exams (focus on force).</p><p>This is exactly the same, it's just a different medium. Think of it as an ongoing book.</p><p>When you sign up, you get 30 days for free. If you don't think the content is worth your money, you can cancel at any time.</p><h3 id=\"reimbursement\">Reimbursement</h3><p>Finally, most companies have the budget for learning and development such as online courses, books, etc. I'm sure you can speak to your manager and expense the cost of this blog.</p><p>In fact, I've created a doc template that you can send to them! </p><p><a href=\"https://docs.google.com/document/d/1_FAAYOLcqQkuL9StUr0hnGqLfbGJJJf5MamNhWaS0xU/edit?usp=sharing\">Stackforce Reimbursement Template</a></p><p>I hope to see you here again!</p><div class=\"kg-card kg-button-card kg-align-center\"><a href=\"__GHOST_URL__/first-month\" class=\"kg-btn kg-btn-accent\">Join stackforce</a></div>","comment_id":"62ed725c1465e8003dd3e9a2","plaintext":"It may seem outrageous that there's a fee to unlock all the articles on this microblog; after all, all Salesforce blogs are free, even trailhead!\n\nSo, let me take 5 min to explain the rationale behind this decision.\n\n\nSalesforce blogs\n\nSalesforce blogs have provided incredible value to the Salesforce ecosystem.\n\nSalesforceBen, the most famous Salesforce blog in the world, has provided a list of the best blogs out there (aside from themselves 😉). I pretty much agree with this list and I visit many of these blogs regularly.\n\nMany of the most popular Salesforce bloggers support themselves by selling ads space, promoted content, or using their blogs to promote other paid content such as books they've written or Udemy courses.\n\nAnd they should! A lot of time is spent crafting blog articles so it is fair that the get some monetary ROI.\n\nA problem with this support model is that the reader of the blog (you) has no saying on the quality of the content, the frequency, etc. And that's because it's free for you, so you don't really get to expect anything from it.\n\nIf a blogger suddenly stops blogging, there's nothing you can do about it. If the quality drops, you have to live with it. If they stop blogging about your favorite topic, you are going to have to find another one.\n\n\nA new support model\n\nBy having the reader directly support the blogger, you have a saying.\n\nIf my articles are not good enough, you can tell me: hey Pablo, this content is BS, this is not what I'm paying for!\n\nYou can hold me accountable, and you can let me know you are not happy by canceling your subscription, something which will directly impact me.\n\nLong story short, this model helps me make sure my content is really good.\n\n\nA highly specialized microblog\n\nThe only topic of this blog is the Salesforce API and how to integrate it with a fullstack web application using traditional software engineering technologies.\n\nI spent 2 years building and refining HappySoup.io, and while this doesn't make me an expert, it does mean I know a thing or two about building fullstack Salesforce apps, and I can talk about it for hours.\n\nThere isn't a single blog out there that specializes in this topic.\n\nAlso, all my articles are under 5 min. I want you to be able to read an article and move on with your day, while still getting value out of it. That's why it's called a microblog.\n\n\nJust another medium\n\nThe Salesforce community is very used to paying for knowledge in the form of Salesforce books, Udemy courses, and mock exams (focus on force).\n\nThis is exactly the same, it's just a different medium. Think of it as an ongoing book.\n\nWhen you sign up, you get 30 days for free. If you don't think the content is worth your money, you can cancel at any time.\n\n\nReimbursement\n\nFinally, most companies have the budget for learning and development such as online courses, books, etc. I'm sure you can speak to your manager and expense the cost of this blog.\n\nIn fact, I've created a doc template that you can send to them!\n\nStackforce Reimbursement Template\n\nI hope to see you here again!\n\nJoin stackforce","feature_image":"https://images.unsplash.com/photo-1503525537183-c84679c9147f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8c2VhcmNofDF8fGFuZ3J5fGVufDB8fHx8MTY1OTc4NTcxNQ&ixlib=rb-1.2.1&q=80&w=2000","featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-08-05T19:41:16.000Z","updated_at":"2022-08-06T14:43:03.000Z","published_at":"2022-08-05T19:52:46.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"62ee886d1465e8003dd3ea0d","uuid":"af44e407-da68-4bcf-937d-a61fd92a8502","title":"Building a Salesforce API wrapper with JS part 1—project structure","slug":"cre","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Why we are doing this instead of using jsforce\"]]],[1,\"p\",[[0,[],0,\"I already did it with sfdc-happy-api\"]]],[1,\"p\",[[0,[],0,\"project structure\"]]],[1,\"p\",[[0,[],0,\"template that I've used in all my nodejs projects\"]]],[1,\"p\",[[0,[],0,\"npm is simply a way to manage nodejs packages, just like salesforce packages that come with prebuilt functionality\"]]],[1,\"p\",[[0,[],0,\"the package.json specifies the structure of the project, the entry point and dependencies. That's all you need to know\"]]],[1,\"p\",[[0,[],0,\"The main.js is the entry point, and we pass stuff to lib. As lib grows, we add more stuff to it\"]]],[1,\"p\",[[0,[],0,\"We use the credentials in a .env file, so we need to import the .env module\"]]],[1,\"p\",[[0,[],0,\"that's it\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Why we are doing this instead of using jsforce</p><p>I already did it with sfdc-happy-api</p><p>project structure</p><p>template that I've used in all my nodejs projects</p><p>npm is simply a way to manage nodejs packages, just like salesforce packages that come with prebuilt functionality</p><p>the package.json specifies the structure of the project, the entry point and dependencies. That's all you need to know</p><p>The main.js is the entry point, and we pass stuff to lib. As lib grows, we add more stuff to it</p><p>We use the credentials in a .env file, so we need to import the .env module</p><p>that's it</p>","comment_id":"62ee886d1465e8003dd3ea0d","plaintext":"Why we are doing this instead of using jsforce\n\nI already did it with sfdc-happy-api\n\nproject structure\n\ntemplate that I've used in all my nodejs projects\n\nnpm is simply a way to manage nodejs packages, just like salesforce packages that come with prebuilt functionality\n\nthe package.json specifies the structure of the project, the entry point and dependencies. That's all you need to know\n\nThe main.js is the entry point, and we pass stuff to lib. As lib grows, we add more stuff to it\n\nWe use the credentials in a .env file, so we need to import the .env module\n\nthat's it","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-08-06T15:27:41.000Z","updated_at":"2022-08-06T15:34:45.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null}],"posts_authors":[{"id":"62cdaf1d2d3dc80031d202b5","post_id":"62cdaf1d2d3dc80031d202b4","author_id":"1","sort_order":0},{"id":"62cf260e8cd2f1003da00486","post_id":"62cf260e8cd2f1003da00485","author_id":"1","sort_order":0},{"id":"62cf585e8cd2f1003da004fb","post_id":"62cf585e8cd2f1003da004fa","author_id":"1","sort_order":0},{"id":"62d02330acb598003d13f659","post_id":"62d02330acb598003d13f658","author_id":"1","sort_order":0},{"id":"62d5bb15761dbf003dadb12c","post_id":"62d5bb15761dbf003dadb12b","author_id":"1","sort_order":0},{"id":"62d7e0bc56c262003d4abaae","post_id":"62d7e0bc56c262003d4abaad","author_id":"1","sort_order":0},{"id":"62d8835956c262003d4abae9","post_id":"62d8835956c262003d4abae8","author_id":"1","sort_order":0},{"id":"62d8838356c262003d4abaed","post_id":"62d8838356c262003d4abaec","author_id":"1","sort_order":0},{"id":"62d8839e56c262003d4abaf1","post_id":"62d8839e56c262003d4abaf0","author_id":"1","sort_order":0},{"id":"62d8840f56c262003d4abaf5","post_id":"62d8840f56c262003d4abaf4","author_id":"1","sort_order":0},{"id":"62d9196056c262003d4abb02","post_id":"62d9196056c262003d4abb01","author_id":"1","sort_order":0},{"id":"62dd583756c262003d4abcf5","post_id":"62dd583756c262003d4abcf4","author_id":"1","sort_order":0},{"id":"62ddc26f56c262003d4abd66","post_id":"62ddc26f56c262003d4abd65","author_id":"1","sort_order":0},{"id":"62e2d2aff795c9003dcdf0ba","post_id":"62e2d2aff795c9003dcdf0b9","author_id":"1","sort_order":0},{"id":"62e7e887f795c9003dcdf26b","post_id":"62e7e887f795c9003dcdf26a","author_id":"1","sort_order":0},{"id":"62e982c91465e8003dd3e917","post_id":"62e982c91465e8003dd3e916","author_id":"1","sort_order":0},{"id":"62ed725c1465e8003dd3e9a3","post_id":"62ed725c1465e8003dd3e9a2","author_id":"1","sort_order":0},{"id":"62ee886d1465e8003dd3ea0e","post_id":"62ee886d1465e8003dd3ea0d","author_id":"1","sort_order":0}],"posts_meta":[{"id":"62cf02388cd2f1003da00479","post_id":"62cdaf1d2d3dc80031d202b4","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"62cf28ec8cd2f1003da004bb","post_id":"62cf260e8cd2f1003da00485","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":"Photo by <a href=\"https://unsplash.com/@pawel_czerwinski?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Pawel Czerwinski</a> / <a href=\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Unsplash</a>","email_only":0},{"id":"62cf59268cd2f1003da0050c","post_id":"62cf585e8cd2f1003da004fa","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":"Photo by <a href=\"https://unsplash.com/@oceanng?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Ocean Ng</a> / <a href=\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Unsplash</a>","email_only":0},{"id":"62d02373acb598003d13f660","post_id":"62d02330acb598003d13f658","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"62e46878f795c9003dcdf180","post_id":"62e2d2aff795c9003dcdf0b9","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"62e53f06f795c9003dcdf19e","post_id":"62ddc26f56c262003d4abd65","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":"Photo by <a href=\"https://unsplash.com/@afgprogrammer?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Mohammad Rahmani</a> / <a href=\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Unsplash</a>","email_only":0},{"id":"62e984f21465e8003dd3e944","post_id":"62e982c91465e8003dd3e916","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":1},{"id":"62ee52141465e8003dd3e9ee","post_id":"62ed725c1465e8003dd3e9a2","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":"Photo by <a href=\"https://unsplash.com/es/@dre0316?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Andre Hunter</a> / <a href=\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Unsplash</a>","email_only":0}],"posts_products":[{"id":"62cf02388cd2f1003da00477","post_id":"62cdaf1d2d3dc80031d202b4","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62cf02388cd2f1003da00478","post_id":"62cdaf1d2d3dc80031d202b4","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62d02334acb598003d13f65c","post_id":"62d02330acb598003d13f658","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62d02334acb598003d13f65d","post_id":"62d02330acb598003d13f658","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62d50d45de8d92003d6e429d","post_id":"62d02330acb598003d13f658","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62d5bb1b761dbf003dadb12f","post_id":"62d5bb15761dbf003dadb12b","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62d5bb1b761dbf003dadb130","post_id":"62d5bb15761dbf003dadb12b","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62d5bb1b761dbf003dadb131","post_id":"62d5bb15761dbf003dadb12b","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62d9198256c262003d4abb05","post_id":"62d9196056c262003d4abb01","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62d9198256c262003d4abb06","post_id":"62d9196056c262003d4abb01","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62d9198256c262003d4abb07","post_id":"62d9196056c262003d4abb01","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62dc4a1e56c262003d4abc49","post_id":"62cdaf1d2d3dc80031d202b4","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62ddc9a556c262003d4abdb4","post_id":"62ddc26f56c262003d4abd65","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62ddc9a556c262003d4abdb5","post_id":"62ddc26f56c262003d4abd65","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62ddc9a556c262003d4abdb6","post_id":"62ddc26f56c262003d4abd65","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62e52be9f795c9003dcdf189","post_id":"62cf260e8cd2f1003da00485","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62e52be9f795c9003dcdf18a","post_id":"62cf260e8cd2f1003da00485","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62e52be9f795c9003dcdf18b","post_id":"62cf260e8cd2f1003da00485","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62e7134bf795c9003dcdf219","post_id":"62cf260e8cd2f1003da00485","product_id":"62e6eba9f795c9003dcdf1da","sort_order":3},{"id":"62e7135bf795c9003dcdf21d","post_id":"62ddc26f56c262003d4abd65","product_id":"62e6eba9f795c9003dcdf1da","sort_order":3},{"id":"62e7ea2cf795c9003dcdf279","post_id":"62e7e887f795c9003dcdf26a","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":0},{"id":"62e7ea2cf795c9003dcdf27a","post_id":"62e7e887f795c9003dcdf26a","product_id":"62d46d5bde8d92003d6e4285","sort_order":1},{"id":"62e7ea2cf795c9003dcdf27b","post_id":"62e7e887f795c9003dcdf26a","product_id":"62e6eba9f795c9003dcdf1da","sort_order":2},{"id":"62e7f0c1f795c9003dcdf353","post_id":"62e2d2aff795c9003dcdf0b9","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":0},{"id":"62e7f0c1f795c9003dcdf354","post_id":"62e2d2aff795c9003dcdf0b9","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62e7f0c1f795c9003dcdf355","post_id":"62e2d2aff795c9003dcdf0b9","product_id":"62e6eba9f795c9003dcdf1da","sort_order":1},{"id":"62e7f0d9f795c9003dcdf359","post_id":"62dd583756c262003d4abcf4","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":0},{"id":"62e7f0d9f795c9003dcdf35a","post_id":"62dd583756c262003d4abcf4","product_id":"62d46d5bde8d92003d6e4285","sort_order":1},{"id":"62e7f0d9f795c9003dcdf35b","post_id":"62dd583756c262003d4abcf4","product_id":"62e6eba9f795c9003dcdf1da","sort_order":2},{"id":"62e7f0eff795c9003dcdf35f","post_id":"62d8839e56c262003d4abaf0","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":0},{"id":"62e7f0eff795c9003dcdf360","post_id":"62d8839e56c262003d4abaf0","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62e7f0eff795c9003dcdf361","post_id":"62d8839e56c262003d4abaf0","product_id":"62e6eba9f795c9003dcdf1da","sort_order":1},{"id":"62e7f100f795c9003dcdf365","post_id":"62d8835956c262003d4abae8","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":0},{"id":"62e7f100f795c9003dcdf366","post_id":"62d8835956c262003d4abae8","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62e7f100f795c9003dcdf367","post_id":"62d8835956c262003d4abae8","product_id":"62e6eba9f795c9003dcdf1da","sort_order":1},{"id":"62e982f61465e8003dd3e91a","post_id":"62e982c91465e8003dd3e916","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62e982f61465e8003dd3e91b","post_id":"62e982c91465e8003dd3e916","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62e982f61465e8003dd3e91c","post_id":"62e982c91465e8003dd3e916","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62e982f61465e8003dd3e91d","post_id":"62e982c91465e8003dd3e916","product_id":"62e6eba9f795c9003dcdf1da","sort_order":3},{"id":"62ed71471465e8003dd3e999","post_id":"62cdaf1d2d3dc80031d202b4","product_id":"62e6eba9f795c9003dcdf1da","sort_order":3},{"id":"62ed72a61465e8003dd3e9a6","post_id":"62ed725c1465e8003dd3e9a2","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62ed72a61465e8003dd3e9a7","post_id":"62ed725c1465e8003dd3e9a2","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62ed72a61465e8003dd3e9a8","post_id":"62ed725c1465e8003dd3e9a2","product_id":"62d46d5bde8d92003d6e4285","sort_order":2},{"id":"62ed72a61465e8003dd3e9a9","post_id":"62ed725c1465e8003dd3e9a2","product_id":"62e6eba9f795c9003dcdf1da","sort_order":3},{"id":"62ee888f1465e8003dd3ea11","post_id":"62ee886d1465e8003dd3ea0d","product_id":"62cdaf1b2d3dc80031d2024e","sort_order":0},{"id":"62ee888f1465e8003dd3ea12","post_id":"62ee886d1465e8003dd3ea0d","product_id":"62cdaf1b2d3dc80031d2024f","sort_order":1},{"id":"62ee888f1465e8003dd3ea13","post_id":"62ee886d1465e8003dd3ea0d","product_id":"62e6eba9f795c9003dcdf1da","sort_order":2},{"id":"62ee888f1465e8003dd3ea14","post_id":"62ee886d1465e8003dd3ea0d","product_id":"62d46d5bde8d92003d6e4285","sort_order":3}],"posts_tags":[{"id":"62d50e56de8d92003d6e42a4","post_id":"62cf585e8cd2f1003da004fa","tag_id":"62cf655e5348fd003d7c99ee","sort_order":0},{"id":"62d67e73761dbf003dadb18c","post_id":"62cf260e8cd2f1003da00485","tag_id":"62cf655e5348fd003d7c99ee","sort_order":0},{"id":"62dabbc956c262003d4abb76","post_id":"62d8835956c262003d4abae8","tag_id":"62dabbc956c262003d4abb75","sort_order":0},{"id":"62dd528e56c262003d4abcec","post_id":"62d8839e56c262003d4abaf0","tag_id":"62dabbc956c262003d4abb75","sort_order":0},{"id":"62dd5f4956c262003d4abd5b","post_id":"62dd583756c262003d4abcf4","tag_id":"62dabbc956c262003d4abb75","sort_order":0},{"id":"62e2efc0f795c9003dcdf153","post_id":"62e2d2aff795c9003dcdf0b9","tag_id":"62dabbc956c262003d4abb75","sort_order":0},{"id":"62e7ea21f795c9003dcdf275","post_id":"62e7e887f795c9003dcdf26a","tag_id":"62d5458b761dbf003dadb0a7","sort_order":0}],"products":[{"id":"62cdaf1b2d3dc80031d2024e","name":"Free","slug":"free","active":1,"welcome_page_url":null,"visibility":"none","monthly_price_id":null,"yearly_price_id":null,"description":"The only microblog for Salesforce devs serious about fullstack development.","type":"free","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-08-01T14:41:50.000Z"},{"id":"62cdaf1b2d3dc80031d2024f","name":"Open Source Devs","slug":"default-product","active":0,"welcome_page_url":null,"visibility":"none","monthly_price_id":"62cdfe4ec62a74003d90da8b","yearly_price_id":"62cdfe4ec62a74003d90da8c","description":"Access to code samples, sample architectures, and more.","type":"paid","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-08-06T15:34:45.000Z"},{"id":"62d46d5bde8d92003d6e4285","name":"PRO","slug":"pro","active":0,"welcome_page_url":null,"visibility":"none","monthly_price_id":"62d5dfbb761dbf003dadb143","yearly_price_id":"62d5dfbb761dbf003dadb144","description":"For Salesforce devs serious about fullstack dev","type":"paid","created_at":"2022-07-17T20:13:15.000Z","updated_at":"2022-08-06T15:34:45.000Z"},{"id":"62e6eba9f795c9003dcdf1da","name":"Stackforce member","slug":"pro-2","active":1,"welcome_page_url":null,"visibility":"public","monthly_price_id":"62ee77f11465e8003dd3e9f0","yearly_price_id":"62e6ebaaf795c9003dcdf1e5","description":"Full access to exclusive content on fullstack Salesforce development","type":"paid","created_at":"2022-07-31T20:52:57.000Z","updated_at":"2022-08-06T15:34:45.000Z"}],"products_benefits":[{"id":"62cdfe4dc62a74003d90da89","product_id":"62cdaf1b2d3dc80031d2024f","benefit_id":"62cdfe4dc62a74003d90da87","sort_order":0},{"id":"62cdfe4dc62a74003d90da8a","product_id":"62cdaf1b2d3dc80031d2024f","benefit_id":"62cdfe4dc62a74003d90da88","sort_order":1},{"id":"62d46ffade8d92003d6e4292","product_id":"62d46d5bde8d92003d6e4285","benefit_id":"62d46ffade8d92003d6e4290","sort_order":0},{"id":"62d47088de8d92003d6e4294","product_id":"62d46d5bde8d92003d6e4285","benefit_id":"62d47088de8d92003d6e4293","sort_order":1},{"id":"62d56f96761dbf003dadb108","product_id":"62d46d5bde8d92003d6e4285","benefit_id":"62d56f96761dbf003dadb107","sort_order":2},{"id":"62d97e8856c262003d4abb32","product_id":"62d46d5bde8d92003d6e4285","benefit_id":"62d97e8856c262003d4abb31","sort_order":3},{"id":"62da9dfe56c262003d4abb47","product_id":"62cdaf1b2d3dc80031d2024e","benefit_id":"62da9dfe56c262003d4abb43","sort_order":1},{"id":"62da9dfe56c262003d4abb48","product_id":"62cdaf1b2d3dc80031d2024e","benefit_id":"62da9dfe56c262003d4abb44","sort_order":2},{"id":"62e5c34ef795c9003dcdf1ce","product_id":"62cdaf1b2d3dc80031d2024e","benefit_id":"62e5c34ef795c9003dcdf1cd","sort_order":0},{"id":"62ebd38b1465e8003dd3e978","product_id":"62e6eba9f795c9003dcdf1da","benefit_id":"62ebd38b1465e8003dd3e973","sort_order":0},{"id":"62ebd38b1465e8003dd3e97a","product_id":"62e6eba9f795c9003dcdf1da","benefit_id":"62ebd38b1465e8003dd3e975","sort_order":2},{"id":"62ebd38b1465e8003dd3e97b","product_id":"62e6eba9f795c9003dcdf1da","benefit_id":"62ebd38b1465e8003dd3e976","sort_order":3},{"id":"62ebd38b1465e8003dd3e97c","product_id":"62e6eba9f795c9003dcdf1da","benefit_id":"62ebd38b1465e8003dd3e977","sort_order":4},{"id":"62ecc9d81465e8003dd3e989","product_id":"62e6eba9f795c9003dcdf1da","benefit_id":"62ecc9d81465e8003dd3e988","sort_order":1}],"roles":[{"id":"62cdaf1b2d3dc80031d20245","name":"Administrator","description":"Administrators","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d20246","name":"Editor","description":"Editors","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d20247","name":"Author","description":"Authors","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d20248","name":"Contributor","description":"Contributors","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d20249","name":"Owner","description":"Blog Owner","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d2024a","name":"Admin Integration","description":"External Apps","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d2024b","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62cdaf1b2d3dc80031d2024c","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-07-12T17:27:55.000Z"},{"id":"62ce8c205970240031fd6006","name":"Ghost Explore Integration","description":"Internal Integration for the Ghost Explore directory","created_at":"2022-07-13T10:10:56.000Z","updated_at":null}],"roles_users":[{"id":"62cdaf1b2d3dc80031d2024d","role_id":"62cdaf1b2d3dc80031d20249","user_id":"1"},{"id":"62e42de4f795c9003dcdf17d","role_id":"62cdaf1b2d3dc80031d20248","user_id":"62e42de4f795c9003dcdf17c"}],"settings":[{"id":"62cdaf1fc62a74003d90d9d8","group":"core","key":"db_hash","value":"da0d490d-258f-48d7-aa56-d0d26d9b3a45","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9d9","group":"core","key":"routes_hash","value":"3d180d52c663d173a6be791ef411ed01","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T17:28:00.000Z"},{"id":"62cdaf1fc62a74003d90d9da","group":"core","key":"next_update_check","value":"1659881731","type":"number","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-08-06T14:15:31.000Z"},{"id":"62cdaf1fc62a74003d90d9db","group":"core","key":"notifications","value":"[]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9dc","group":"core","key":"version_notifications","value":"[]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9dd","group":"core","key":"admin_session_secret","value":"c7c8683e95a5886da1b99480d194deea5b767a595e0bd0b42ca03f1605f042da","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9de","group":"core","key":"theme_session_secret","value":"c37cceea0a6ef87d9f661dffd7bdb2466dc8f141621013d9f1d138417e92a203","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9df","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAKkxLIO3MH2Wdi4tuk7IeY9M7hOxOmzmP5/08AgTRtdxRh9hKLlLib595YvY7s9L\nP3O8NR2jor9X8Uijb7iC8j+OIS4/k961KUbnNe94qS6AjF+T9ldOpD4bJZPJO2IJkVxVIdgN\nZJ7dTOIgmYNudLBYqUeTPztYZm2Zz/PGVXjDAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9e0","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCpMSyDtzB9lnYuLbpOyHmPTO4TsTps5j+f9PAIE0bXcUYfYSi5S4m+feWL\n2O7PSz9zvDUdo6K/V/FIo2+4gvI/jiEuP5PetSlG5zXveKkugIxfk/ZXTqQ+GyWTyTtiCZFc\nVSHYDWSe3UziIJmDbnSwWKlHkz87WGZtmc/zxlV4wwIDAQABAoGAN7Db+i8eYvhXxjN/E9eh\nS64C37CCjr3rS3eQWtgdhWTftAyDHxriKDXAjRvG36zhIfNdeHgYZetInKRPbeiMXB1KINWz\nNUD/fKeFG7oQwDGY0dpqafSK0Zsa2w2B77uXP6G+QR7vwLz06taLSI7EdSCr6kxYXhHfJrbQ\n6MD/doECQQDoxNtAIUvTxxhaFGneaDQusZrEe1JmEjNR6HsaEy7XwbCUeOrAc2M4GkSVsk6C\nufpDbYAYlAWsJ8UzkzLjJ9PTAkEAuhP00k3YX1t4F6v/auvvIv2eFbs9gPvrezG5yhuO+zvo\nyS6QxPscQomg3y7M8IL75XemV79a9PPjJH9PXdXhUQJABB3PHtA37hPcS2OHB8bh/V1otkbU\nCzgRLkalPq3OK0Sioc2NoT+pJonYYqlXmBo/4cdi94xOmV/Orf3RbZD7vwJAdpgLfBHDKptY\ngfXMNzAh3HI50+3fOBrXLVA28jn4OeUn6zjzaagFjd67miLw2QUSWGCWsuwxo1bhWLyPL+YF\n0QJBAIVj1tucFQjUOizUxhPy1giAe2iVr2jASUrr+iYPSRQCd8Z2RSPPTolkaAdDdhQHzvGC\nQyxZBEToKq+Fyjuo0MM=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9e1","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAIwlo4/dRN+8CafeBXAQ2eeMInGtTltwVglUuVmm7fYmW9pcPC8UBzFN2fEdWAFH\nJ5VH8Y28+dl1tJlDdAzC1YBql6Gjp0thDtFNbJKCIogAQxZFYYPh5lRBoO8KXlA8MpZpjQID\nGGlyMcJKgm9qMP5Blr2bmD+jzzDpURMn5KMnAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9e2","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCMJaOP3UTfvAmn3gVwENnnjCJxrU5bcFYJVLlZpu32JlvaXDwvFAcxTdnx\nHVgBRyeVR/GNvPnZdbSZQ3QMwtWAapeho6dLYQ7RTWySgiKIAEMWRWGD4eZUQaDvCl5QPDKW\naY0CAxhpcjHCSoJvajD+QZa9m5g/o88w6VETJ+SjJwIDAQABAoGAb+iuTva1RKL2YuFbHj2W\ngtrXtkZZR5LQYOsShpBRfDjtJ9R3CnDHvYsY+PwhhgO3i/DC5hd8uzTOXYQLaxU5PfbGppfi\nETnRV17qkKBS2dmlIge0CLTkGm/pCzQfef7HTZMVFQ1AU5rVyawdThJzBWZK8p8KKxTQCU/a\nUlwXW6ECQQDwRTGlNsXblCl0Ss502ph4jQ+hRDTYZHMJlpF12m1K2HixGB7sHnqOe+wLsgW3\nZUgIGyclKXRiNdBw8Otwce9zAkEAlVJuR3Y10vQQv2QuA8EWE09He7eid8j9q3iSxzN+S/ZS\nHDy6YNEchlP1WSMiED6DrPK6ogtroq1dQv9iNhRofQJBAMtSkp9vyWF2cNoTT8C9Fxe0r0xV\n7q5L2rl7bB6iN6iFpSSf99LyO94Fagu/m2zFzX3mlGqzOOS/C2P3zBT8pZcCQF2fkHuH95lr\n4/BMnLlH4FJ9G8HLUreuMrbHY6g4dhCkwbjorqczlaH3lFauO5ZZy++tRS2C4Zre/iGaxHZJ\n93UCQQANACDIq4q0PADFDvrDbnmmlLC6F+LNgYIx76MP7R2w+u/cE+3ZVw7SZ5UBKthi+iba\nlaAGE4hO/FwP8CASwzFD\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9e3","group":"core","key":"members_email_auth_secret","value":"8d6aff3971560270f9b66acf37379167bb9120f51a4e208d592100f05fa52c7e305f1fb5bbe162ff039b6755f23869e991b89aea0714e7441ab34cf562e72998","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9e6","group":"site","key":"title","value":"Stackforce","type":"string","flags":"PUBLIC","created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-30T22:56:21.000Z"},{"id":"62cdaf1fc62a74003d90d9e7","group":"site","key":"description","value":"The only microblog for Salesforce devs serious about fullstack development. New issue every 2 weeks—5 min actionable content on Salesforce APIs, Node.js and much more.","type":"string","flags":"PUBLIC","created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-29T17:39:06.000Z"},{"id":"62cdaf1fc62a74003d90d9e8","group":"site","key":"logo","value":"__GHOST_URL__/content/images/2022/07/Color-logo-with-background.png","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-30T22:36:38.000Z"},{"id":"62cdaf1fc62a74003d90d9e9","group":"site","key":"cover_image","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T23:56:13.000Z"},{"id":"62cdaf1fc62a74003d90d9ea","group":"site","key":"icon","value":"__GHOST_URL__/content/images/2022/07/Color-logo---no-background.png","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-30T22:36:38.000Z"},{"id":"62cdaf1fc62a74003d90d9eb","group":"site","key":"accent_color","value":"#2980b9","type":"string","flags":"PUBLIC","created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-08-05T17:18:08.000Z"},{"id":"62cdaf1fc62a74003d90d9ec","group":"site","key":"locale","value":"en","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9ed","group":"site","key":"timezone","value":"Etc/UTC","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9ee","group":"site","key":"codeinjection_head","value":"<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/themes/prism-okaidia.min.css\" integrity=\"sha512-mIs9kKbaw6JZFfSuo+MovjU+Ntggfoj8RwAmJbVXQ5mkAX5LlgETQEweFPI18humSPHymTb5iikEOKWF7I8ncQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n<script defer data-domain=\"stackforce.one\" src=\"https://plausible.io/js/plausible.js\"></script>","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-24T15:20:41.000Z"},{"id":"62cdaf1fc62a74003d90d9ef","group":"site","key":"codeinjection_foot","value":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-core.min.js\" integrity=\"sha512-9khQRAUBYEJDCDVP2yw3LRUQvjJ0Pjx0EShmaQjcHa6AXiOv6qHQu9lCAIR8O+/D8FtaCoJ2c0Tf9Xo7hYH01Q==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/plugins/autoloader/prism-autoloader.min.js\" integrity=\"sha512-fTl/qcO1VgvKtOMApX2PdZzkziyr2stM65GYPLGuYMnuMm1z2JLJG6XVU7C/mR+E7xBUqCivykuhlzfqxXBXbg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-22T14:49:57.000Z"},{"id":"62cdaf1fc62a74003d90d9f0","group":"site","key":"facebook","value":"ghost","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9f1","group":"site","key":"twitter","value":"@ghost","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9f2","group":"site","key":"navigation","value":"[{\"label\":\"Fullstack Recipes\",\"url\":\"/tag/fullstack-recipes/\"},{\"label\":\"Under the code series\",\"url\":\"/tag/under-the-code/\"},{\"label\":\"About\",\"url\":\"/about/\"}]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-08-05T19:32:18.000Z"},{"id":"62cdaf1fc62a74003d90d9f3","group":"site","key":"secondary_navigation","value":"[{\"label\":\"Sign up\",\"url\":\"#/portal/\"},{\"label\":\"Fullstack Recipes\",\"url\":\"/\"},{\"label\":\"Under the code series\",\"url\":\"/tag/under-the-code/\"},{\"label\":\"About\",\"url\":\"/about/\"}]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-08-01T15:19:37.000Z"},{"id":"62cdaf1fc62a74003d90d9f4","group":"site","key":"meta_title","value":"Stackforce—Microblog for fullstack Salesforce devs","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-30T23:42:45.000Z"},{"id":"62cdaf1fc62a74003d90d9f5","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9f6","group":"site","key":"og_image","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9f7","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9f8","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9f9","group":"site","key":"twitter_image","value":"__GHOST_URL__/content/images/2022/07/Color-logo-with-background-1.png","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-30T23:42:45.000Z"},{"id":"62cdaf1fc62a74003d90d9fa","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9fb","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9fc","group":"theme","key":"active_theme","value":"journal-stackforce","type":"string","flags":"RO","created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-18T15:48:46.000Z"},{"id":"62cdaf1fc62a74003d90d9fd","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9fe","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90d9ff","group":"private","key":"public_hash","value":"b6aba5a880683946bf6c5bc3deae03","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da00","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-31T23:36:16.000Z"},{"id":"62cdaf1fc62a74003d90da01","group":"members","key":"default_content_visibility_tiers","value":"[]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da02","group":"members","key":"members_signup_access","value":"all","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da03","group":"members","key":"members_support_address","value":"pgonzaleznetwork@gmail.com","type":"string","flags":"PUBLIC,RO","created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-23T22:46:22.000Z"},{"id":"62cdaf1fc62a74003d90da06","group":"members","key":"stripe_plans","value":"[]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da09","group":"members","key":"stripe_connect_livemode","value":"true","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T23:03:55.000Z"},{"id":"62cdaf1fc62a74003d90da0a","group":"members","key":"stripe_connect_display_name","value":"HappySoup","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T23:03:55.000Z"},{"id":"62cdaf1fc62a74003d90da0c","group":"members","key":"members_monthly_price_id","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da0d","group":"members","key":"members_yearly_price_id","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da0e","group":"portal","key":"portal_name","value":"false","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-22T12:56:00.000Z"},{"id":"62cdaf1fc62a74003d90da0f","group":"portal","key":"portal_button","value":"true","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-08-04T19:44:07.000Z"},{"id":"62cdaf1fc62a74003d90da10","group":"portal","key":"portal_plans","value":"[\"monthly\"]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-08-01T14:41:51.000Z"},{"id":"62cdaf1fc62a74003d90da11","group":"portal","key":"portal_products","value":"[]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da12","group":"portal","key":"portal_button_style","value":"icon-only","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-31T20:54:14.000Z"},{"id":"62cdaf1fc62a74003d90da13","group":"portal","key":"portal_button_icon","value":"icon-1","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-23T22:45:24.000Z"},{"id":"62cdaf1fc62a74003d90da14","group":"portal","key":"portal_button_signup_text","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-31T20:54:14.000Z"},{"id":"62cdaf1fc62a74003d90da15","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da16","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da17","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da18","group":"email","key":"email_track_opens","value":"true","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da1a","group":"amp","key":"amp","value":"false","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da1b","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da1c","group":"firstpromoter","key":"firstpromoter","value":"false","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da1d","group":"firstpromoter","key":"firstpromoter_id","value":null,"type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da1e","group":"labs","key":"labs","value":"{}","type":"object","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da1f","group":"slack","key":"slack_url","value":"","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da20","group":"slack","key":"slack_username","value":"Ghost","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da21","group":"unsplash","key":"unsplash","value":"true","type":"boolean","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da22","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-12T18:27:59.000Z"},{"id":"62cdaf1fc62a74003d90da23","group":"editor","key":"editor_default_email_recipients","value":"visibility","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-23T19:09:46.000Z"},{"id":"62cdaf1fc62a74003d90da24","group":"editor","key":"editor_default_email_recipients_filter","value":"none","type":"string","flags":null,"created_at":"2022-07-12T18:27:59.000Z","updated_at":"2022-07-23T19:09:45.000Z"},{"id":"62ce8c205970240031fd6005","group":"comments","key":"comments_enabled","value":"off","type":"string","flags":null,"created_at":"2022-07-13T10:10:56.000Z","updated_at":"2022-07-13T10:10:56.000Z"}],"snippets":[{"id":"62cf26af8cd2f1003da0049a","name":"test","mobiledoc":"{\"version\":\"0.3.2\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"h3\",[[0,[],0,\"How to identify a problem\"]]]]}","created_at":"2022-07-13T20:10:23.000Z","updated_at":"2022-07-13T20:10:23.000Z"},{"id":"62cf512d8cd2f1003da004f3","name":"hs","mobiledoc":"{\"version\":\"0.3.2\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"HappySoup.io\"]]],\"sections\":[[1,\"p\",[[0,[0],1,\"HappySoup.io\"]]]]}","created_at":"2022-07-13T23:11:41.000Z","updated_at":"2022-07-13T23:11:41.000Z"},{"id":"62e712bdf795c9003dcdf1f8","name":"subscribe","mobiledoc":"{\"version\":\"0.3.2\",\"atoms\":[],\"cards\":[[\"callout\",{\"calloutEmoji\":\"💡\",\"calloutText\":\"If you found this article useful, <a href=\\\"__GHOST_URL__/#/portal/signup\\\">please consider subscribing!</a> I have big plans for subscribers in the future :)&nbsp;\",\"backgroundColor\":\"accent\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at":"2022-07-31T23:39:41.000Z","updated_at":"2022-07-31T23:40:15.000Z"}],"stripe_prices":[{"id":"62cdfdddc62a74003d90da85","stripe_price_id":"price_1LKs7VIz2bMzV5LO2VN4FgHY","stripe_product_id":"prod_M2y3jL6G6MOwLK","active":1,"nickname":"Monthly","currency":"usd","amount":500,"type":"recurring","interval":"month","description":null,"created_at":"2022-07-12T23:03:57.000Z","updated_at":"2022-07-12T23:03:57.000Z"},{"id":"62cdfdddc62a74003d90da86","stripe_price_id":"price_1LKs7VIz2bMzV5LOWMIJdAEc","stripe_product_id":"prod_M2y3jL6G6MOwLK","active":1,"nickname":"Yearly","currency":"usd","amount":5000,"type":"recurring","interval":"year","description":null,"created_at":"2022-07-12T23:03:57.000Z","updated_at":"2022-07-12T23:03:57.000Z"},{"id":"62cdfe4ec62a74003d90da8b","stripe_price_id":"price_1LKs9KIz2bMzV5LOtmP3UcOR","stripe_product_id":"prod_M2y3jL6G6MOwLK","active":1,"nickname":"Monthly","currency":"usd","amount":200,"type":"recurring","interval":"month","description":null,"created_at":"2022-07-12T23:05:50.000Z","updated_at":"2022-07-12T23:05:50.000Z"},{"id":"62cdfe4ec62a74003d90da8c","stripe_price_id":"price_1LKs9KIz2bMzV5LOMh4lgDCK","stripe_product_id":"prod_M2y3jL6G6MOwLK","active":1,"nickname":"Yearly","currency":"usd","amount":2000,"type":"recurring","interval":"year","description":null,"created_at":"2022-07-12T23:05:50.000Z","updated_at":"2022-07-12T23:05:50.000Z"},{"id":"62d46d5cde8d92003d6e4287","stripe_price_id":"price_1LMdq4Iz2bMzV5LOWcczUKjC","stripe_product_id":"prod_M4nQ7u3MuZa7WY","active":1,"nickname":"Monthly","currency":"usd","amount":500,"type":"recurring","interval":"month","description":null,"created_at":"2022-07-17T20:13:16.000Z","updated_at":"2022-07-17T20:13:16.000Z"},{"id":"62d46d5cde8d92003d6e4288","stripe_price_id":"price_1LMdq4Iz2bMzV5LO0W8ZkBbt","stripe_product_id":"prod_M4nQ7u3MuZa7WY","active":1,"nickname":"Yearly","currency":"usd","amount":4500,"type":"recurring","interval":"year","description":null,"created_at":"2022-07-17T20:13:16.000Z","updated_at":"2022-07-17T20:13:16.000Z"},{"id":"62d5dfbb761dbf003dadb143","stripe_price_id":"price_1LN2VKIz2bMzV5LOMjgSBsm4","stripe_product_id":"prod_M4nQ7u3MuZa7WY","active":1,"nickname":"Monthly","currency":"usd","amount":600,"type":"recurring","interval":"month","description":null,"created_at":"2022-07-18T22:33:31.000Z","updated_at":"2022-07-18T22:33:31.000Z"},{"id":"62d5dfbb761dbf003dadb144","stripe_price_id":"price_1LN2VLIz2bMzV5LOVky1oJww","stripe_product_id":"prod_M4nQ7u3MuZa7WY","active":1,"nickname":"Yearly","currency":"usd","amount":5000,"type":"recurring","interval":"year","description":null,"created_at":"2022-07-18T22:33:31.000Z","updated_at":"2022-07-18T22:33:31.000Z"},{"id":"62e6ebaaf795c9003dcdf1e4","stripe_price_id":"price_1LRj8AIz2bMzV5LORq4ypTpb","stripe_product_id":"prod_MA3Et9eGNGu27c","active":1,"nickname":"Monthly","currency":"usd","amount":600,"type":"recurring","interval":"month","description":null,"created_at":"2022-07-31T20:52:58.000Z","updated_at":"2022-08-01T21:46:34.000Z"},{"id":"62e6ebaaf795c9003dcdf1e5","stripe_price_id":"price_1LRj8AIz2bMzV5LOCiLQtca1","stripe_product_id":"prod_MA3Et9eGNGu27c","active":1,"nickname":"Yearly","currency":"usd","amount":5000,"type":"recurring","interval":"year","description":null,"created_at":"2022-07-31T20:52:58.000Z","updated_at":"2022-07-31T20:52:58.000Z"},{"id":"62ea74ab1465e8003dd3e963","stripe_price_id":"price_1LShOxIz2bMzV5LOQojemFIk","stripe_product_id":"prod_M2y3jL6G6MOwLK","active":1,"nickname":"Complimentary","currency":"usd","amount":0,"type":"recurring","interval":"year","description":null,"created_at":"2022-08-03T13:14:19.000Z","updated_at":"2022-08-03T13:25:55.000Z"},{"id":"62ee77f11465e8003dd3e9f0","stripe_price_id":"price_1LTnobIz2bMzV5LOdwxHSzjY","stripe_product_id":"prod_MA3Et9eGNGu27c","active":1,"nickname":"Monthly","currency":"usd","amount":499,"type":"recurring","interval":"month","description":null,"created_at":"2022-08-06T14:17:21.000Z","updated_at":"2022-08-06T14:17:21.000Z"},{"id":"62ee77f21465e8003dd3e9f1","stripe_price_id":"price_1LTnobIz2bMzV5LO3igfJ8Qd","stripe_product_id":"prod_MA3Et9eGNGu27c","active":1,"nickname":"Yearly","currency":"usd","amount":3900,"type":"recurring","interval":"year","description":null,"created_at":"2022-08-06T14:17:22.000Z","updated_at":"2022-08-06T14:17:22.000Z"}],"stripe_products":[{"id":"62cdfddcc62a74003d90da84","product_id":"62cdaf1b2d3dc80031d2024f","stripe_product_id":"prod_M2y3jL6G6MOwLK","created_at":"2022-07-12T23:03:56.000Z","updated_at":"2022-07-12T23:03:56.000Z"},{"id":"62d46d5bde8d92003d6e4286","product_id":"62d46d5bde8d92003d6e4285","stripe_product_id":"prod_M4nQ7u3MuZa7WY","created_at":"2022-07-17T20:13:15.000Z","updated_at":"2022-07-17T20:13:15.000Z"},{"id":"62e6ebaaf795c9003dcdf1e3","product_id":"62e6eba9f795c9003dcdf1da","stripe_product_id":"prod_MA3Et9eGNGu27c","created_at":"2022-07-31T20:52:58.000Z","updated_at":"2022-07-31T20:52:58.000Z"}],"tags":[{"id":"62cf655e5348fd003d7c99ee","name":"Product Management","slug":"product","description":"Product management best practices for fullstack Salesforce apps","feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#a15e5e","created_at":"2022-07-14T00:37:50.000Z","updated_at":"2022-08-01T14:47:13.000Z"},{"id":"62d5458b761dbf003dadb0a7","name":"Under the code","slug":"under-the-code","description":"The exclusive \"Under the code\" series, where other fullstack Salesforce devs reveal how they created amazing apps","feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":"#369686","created_at":"2022-07-18T11:35:39.000Z","updated_at":"2022-08-05T19:56:50.000Z"},{"id":"62dabbc956c262003d4abb75","name":"Fullstack Recipes","slug":"fullstack-recipes","description":"Copy-paste ready (but don't!) recipes for your fullstack Salesforce app","feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2022-07-22T15:01:29.000Z","updated_at":"2022-08-06T14:59:03.000Z"}],"users":[{"id":"1","name":"Pablo Gonzalez","slug":"pablo","password":"$2a$10$yhcoYaHiIIpH6BLs.k78zOteDuveNZ.CdKGiRWrydI5F6yS/42.xC","email":"pgonzaleznetwork@gmail.com","profile_image":"__GHOST_URL__/content/images/2022/07/44146898155_b6fc941f3a_o--1-.jpg","cover_image":null,"bio":"Salesforce architect and full-stack dev","website":"http://www.linkedin.com/in/the-real-pablo","location":null,"facebook":null,"twitter":null,"accessibility":"{\"nightShift\":false,\"whatsNew\":{\"lastSeenDate\":\"2022-07-13T12:42:42.000+00:00\"}}","status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2022-08-06T22:54:08.000Z","created_at":"2022-07-12T17:27:55.000Z","updated_at":"2022-08-06T22:54:08.000Z","comment_notifications":1},{"id":"62e42de4f795c9003dcdf17c","name":"Community Contributor","slug":"community-contributor","password":"$2a$10$7dBYTmjVaW2ikoF8SKT5W.YajTrmHjt1e4j9tx2WTYJtS9ZBuuvzS","email":"pablo.gonzalez@salto.io","profile_image":"__GHOST_URL__/content/images/2022/07/Color-logo-with-background-2.png","cover_image":null,"bio":"This is a guest account, anyone can use it to post on Stackforce!","website":null,"location":"Anywhere","facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2022-07-29T18:58:45.000Z","created_at":"2022-07-29T18:58:44.000Z","updated_at":"2022-07-30T23:44:01.000Z","comment_notifications":1}]}}]}